{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#purpose","title":"Purpose","text":"<p>This repository is designed to help those transitioning from <code>Pandas</code> to <code>Polars</code> become acquainted with <code>Polars</code>' syntax. Most of the code examples are sourced from the excellent Polars user guide. Each example features both <code>Polars</code> and <code>Pandas</code> code, encouraging you to practice converting <code>Polars</code> to <code>Pandas</code> independently. If you encounter challenges with <code>Polars</code>, you can refer to my solutions for guidance. I believe that with these hints, you'll develop even better solutions of your own. This approach will enable you to swiftly grasp <code>Polars</code> through the familiar lens of <code>Pandas</code>.</p>"},{"location":"#why-take-this-approach","title":"Why take this approach?","text":"<p>Converting code from <code>Polars</code> to <code>Pandas</code> involves a three-step process:</p> <ol> <li>Familiarizing with <code>Polars</code>: First, you must acquaint yourself with <code>Polars</code>' syntax to understand its meaning.</li> <li>Converting to <code>Pandas</code>: During the conversion process, you'll need to determine how to accomplish tasks using <code>Pandas</code>.</li> <li>Comparing the results: Finally, you'll compare the results and gain insights into the strengths and weaknesses of both libraries.</li> </ol> <p>This approach ensures a comprehensive understanding of both <code>Polars</code> and <code>Pandas</code>, enabling you to make informed decisions when working with data manipulation libraries.</p>"},{"location":"#embrace-the-new-mindset","title":"Embrace the new mindset","text":""},{"location":"#contexts","title":"Contexts","text":"<p>Contexts in <code>Polars</code> determine how to perform operations similar to <code>df.loc[.., ..]</code>, <code>df.iloc[.., ..]</code> and <code>df[..]</code>. </p> <p>In <code>Polars</code>, You'll mainly work with these three contexts to manipulate rows and columns:</p> <ul> <li><code>pl.select([..])</code>: Select or create columns.</li> <li><code>pl.with_columns([..])</code>: Create columns.</li> <li><code>pl.filter(..)</code>: Filter rows.</li> </ul> <p>It's worth noting that <code>pl.group_by(..).agg([..])</code> serves as a specialized context in <code>Polars</code> for aggregation purposes.</p>"},{"location":"#expressions","title":"Expressions","text":"<p>Expressions in <code>Polars</code> are akin to the operations you wish to perform. They are present throughout the library. You'll find them used for various tasks, such as changing a column's data type, sorting a column, extracting the initial rows, and even computing the mean value for each group after performing a <code>group by</code> operation.</p>"},{"location":"#no-more-index","title":"No more index","text":"<p><code>Polars</code> excels at data manipulation through a column-based approach, unburdened by index-based constraints. In contrast, <code>Pandas</code> primarily relies on index alignment as the key concept for connecting columns within each row. If you need to break the relationship for a single column in <code>Pandas</code>, especially when the original index is multi-indexed, you'll likely find yourself doing a substantial amount of work to figure out how to realign it.</p> <pre><code>import pandas as pd\nimport polars as pl\n\ndata = {\"nrs\": [5, 4, 3, 2, 1],\n        \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"baz\"]}\ndf_pl = pl.DataFrame(data)\ndf_pd = pd.DataFrame(data)\n</code></pre> <p></p> PolarsPandas <pre><code>out_pl = (df_pl.select(nrs=pl.col(\"nrs\").sort(),\n                       names=pl.col(\"names\").reverse()))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2502\n\u2502 --- \u2506 ---   \u2502\n\u2502 i64 \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 baz   \u2502\n\u2502 2   \u2506 egg   \u2502\n\u2502 3   \u2506 spam  \u2502\n\u2502 4   \u2506 ham   \u2502\n\u2502 5   \u2506 foo   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd.assign(nrs=lambda df_: df_.nrs.sort_values().reset_index(drop=True),\n                       names=lambda df_: df_.names[::-1].reset_index(drop=True)))\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs names\n0    1   baz\n1    2   egg\n2    3  spam\n3    4   ham\n4    5   foo\n</code></pre> </p> <p>Pseudo Index</p> <p>If you really need the index to help you get used to <code>Polars</code>, you can refer to df.with_row_count().</p>"},{"location":"#parallel","title":"Parallel","text":"<p><code>Polars</code> is designed to operate in parallel. This means that you can't refer a column name you've assigned within the same context. This behavior may require some adjustment for <code>Pandas</code> users who are accustomed to heavily using <code>pd.assign()</code>.</p> <pre><code>import pandas as pd\nimport polars as pl\n\ndata = {\"nrs\": [5, 4, 3, 2, 1],\n        \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"baz\"]}\ndf_pl = pl.DataFrame(data)\ndf_pd = pd.DataFrame(data)\n</code></pre> <p></p> PolarsPandas <pre><code>out_pl = (df_pl\n          .with_columns(add1=pl.col(\"nrs\") + 1)\n          .with_columns(add2=pl.col(\"add1\") + 1))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 add1 \u2506 add2 \u2502\n\u2502 --- \u2506 ---   \u2506 ---  \u2506 ---  \u2502\n\u2502 i64 \u2506 str   \u2506 i64  \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 5   \u2506 foo   \u2506 6    \u2506 7    \u2502\n\u2502 4   \u2506 ham   \u2506 5    \u2506 6    \u2502\n\u2502 3   \u2506 spam  \u2506 4    \u2506 5    \u2502\n\u2502 2   \u2506 egg   \u2506 3    \u2506 4    \u2502\n\u2502 1   \u2506 baz   \u2506 2    \u2506 3    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p>This code snippet will raise <code>pl.exceptions.ColumnNotFoundError</code>.</p> <pre><code>df_pl.with_columns(add1=pl.col(\"nrs\") + 1,\n                   add2=pl.col(\"add1\") + 1)\n</code></pre> <pre><code>out_pd = df_pd.assign(add1=lambda df_: df_.nrs + 1,\n                      add2=lambda df_: df_.add1 + 1)\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs names  add1  add2\n0    5   foo     6     7\n1    4   ham     5     6\n2    3  spam     4     5\n3    2   egg     3     4\n4    1   baz     2     3\n</code></pre> </p>"},{"location":"#namespaces","title":"Namespaces","text":"<p>Namespaces in <code>Polars</code> are akin to accessors in <code>Pandas</code>. However, <code>Polars</code> offers more robust namespaces compared to <code>Pandas</code>, with features such as the list namespace, which can be incredibly useful.</p>"},{"location":"#lazy","title":"Lazy","text":"<p>Lazy is at the core of <code>Polars</code> and offers numerous advantages compared to the eager mode. For a more in-depth understanding, you should refer to the user guide.</p>"},{"location":"#missing-data","title":"Missing data","text":"<p>In <code>Polars</code>, missing data is consistently represented as a <code>null</code> value. Additionally, <code>Polars</code> permits the use of <code>Not a Number</code> or <code>NaN</code> values for float columns. It's important to avoid conflating these two concepts.\" </p>"},{"location":"contexts/filter/","title":"pl.filter()","text":"<p><code>pl.filter([..])</code> selects rows based on the given conditions.</p>"},{"location":"contexts/filter/#setup","title":"Setup","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport polars as pl\n\nnp.random.seed(42)\ndata = {\n    \"nrs\": [1, 2, 3, 4, 5],\n    \"random\": np.random.rand(5)\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 random   \u2502\n\u2502 --- \u2506 ---      \u2502\n\u2502 i64 \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 0.37454  \u2502\n\u2502 2   \u2506 0.950714 \u2502\n\u2502 3   \u2506 0.731994 \u2502\n\u2502 4   \u2506 0.598658 \u2502\n\u2502 5   \u2506 0.156019 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>   nrs    random\n0    1  0.374540\n1    2  0.950714\n2    3  0.731994\n3    4  0.598658\n4    5  0.156019\n</code></pre> </p>"},{"location":"contexts/filter/#example","title":"Example","text":"<p>The behavior of <code>pl.filter([..])</code> can be treated as <code>df.query(..)</code> in <code>Pandas</code>.</p> PolarsPandas <pre><code>out_pl = df_pl.filter((pl.col(\"nrs\") &gt; 2) &amp; (pl.col(\"random\") &gt; 0.5))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 random   \u2502\n\u2502 --- \u2506 ---      \u2502\n\u2502 i64 \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2506 0.731994 \u2502\n\u2502 4   \u2506 0.598658 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .query(\"nrs &gt; 2 &amp; random &gt; 0.5\")\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs    random\n2    3  0.731994\n3    4  0.598658\n</code></pre> </p>"},{"location":"contexts/filter/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"contexts/group_by/","title":"pl.group_by().agg()","text":"<p><code>pl.group_by(..).agg([..])</code> groups specific columns and performs parallel aggregations.</p>"},{"location":"contexts/group_by/#setup","title":"Setup","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport polars as pl\n\nnp.random.seed(42)\ndata = {\n    \"nrs\": [1, 2, 3, 4, 5],\n    \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"baz\"],\n    \"random\": np.random.rand(5),\n    \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"]\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 --- \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64 \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 foo   \u2506 0.37454  \u2506 A      \u2502\n\u2502 2   \u2506 ham   \u2506 0.950714 \u2506 A      \u2502\n\u2502 3   \u2506 spam  \u2506 0.731994 \u2506 B      \u2502\n\u2502 4   \u2506 egg   \u2506 0.598658 \u2506 C      \u2502\n\u2502 5   \u2506 baz   \u2506 0.156019 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>   nrs names    random groups\n0    1   foo  0.374540      A\n1    2   ham  0.950714      A\n2    3  spam  0.731994      B\n3    4   egg  0.598658      C\n4    5   baz  0.156019      B\n</code></pre> </p>"},{"location":"contexts/group_by/#example","title":"Example","text":"<p><code>pl.group_by(..).agg(..)</code> behaves similarly to <code>pd.groupby(..).agg(..)</code>. In <code>Polars</code>, aggregation is primarily achieved through <code>expressions</code>, whereas <code>Pandas</code> relies on the provided methods of the grouper object.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .group_by(\"groups\")\n          .agg(pl.col(\"nrs\").sum(),\n               pl.col(\"random\").count(),\n               (pl.col(\"random\")\n                .filter(pl.col(\"names\").str.contains(\"m\")).sum().suffix(\"_sum\")),\n               pl.col(\"names\").reverse().alias(\"reversed names\"))\n          .sort(by=\"groups\")\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 groups \u2506 nrs \u2506 random \u2506 random_sum \u2506 reversed names  \u2502\n\u2502 ---    \u2506 --- \u2506 ---    \u2506 ---        \u2506 ---             \u2502\n\u2502 str    \u2506 i64 \u2506 u32    \u2506 f64        \u2506 list[str]       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 A      \u2506 3   \u2506 2      \u2506 0.950714   \u2506 [\"ham\", \"foo\"]  \u2502\n\u2502 B      \u2506 8   \u2506 2      \u2506 0.731994   \u2506 [\"baz\", \"spam\"] \u2502\n\u2502 C      \u2506 4   \u2506 1      \u2506 0.0        \u2506 [\"egg\"]         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(random_m=lambda df_: df_.random[df_.names.str.contains(\"m\")])\n          .groupby(\"groups\")\n          .agg(**{\"nrs\": (\"nrs\", \"sum\"),\n                  \"random\": (\"random\", \"count\"),\n                  \"random_sum\": (\"random_m\", \"sum\"),\n                  \"reverse names\": (\"names\", lambda s_: s_[::-1])})\n          .reset_index()\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>  groups  nrs  random  random_sum reverse names\n0      A    3       2    0.950714    [ham, foo]\n1      B    8       2    0.731994   [baz, spam]\n2      C    4       1    0.000000           egg\n</code></pre> </p>"},{"location":"contexts/group_by/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"contexts/select/","title":"pl.select()","text":"<p><code>pl.select([..])</code> is a powerful selection tool that allows you to select one or more columns and perform operations on them in parallel. This includes the ability to create new columns as part of your selection process.</p>"},{"location":"contexts/select/#setup","title":"Setup","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport polars as pl\n\nnp.random.seed(42)\ndata = {\n    \"nrs\": [1, 2, 3, 4, 5],\n    \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"baz\"],\n    \"random\": np.random.rand(5),\n    \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"]\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 --- \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64 \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 foo   \u2506 0.37454  \u2506 A      \u2502\n\u2502 2   \u2506 ham   \u2506 0.950714 \u2506 A      \u2502\n\u2502 3   \u2506 spam  \u2506 0.731994 \u2506 B      \u2502\n\u2502 4   \u2506 egg   \u2506 0.598658 \u2506 C      \u2502\n\u2502 5   \u2506 baz   \u2506 0.156019 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>   nrs names    random groups\n0    1   foo  0.374540      A\n1    2   ham  0.950714      A\n2    3  spam  0.731994      B\n3    4   egg  0.598658      C\n4    5   baz  0.156019      B\n</code></pre> </p>"},{"location":"contexts/select/#basic-form","title":"Basic form","text":"<p>If selecting at least one column from the original dataframe, the behavior of <code>pl.select([..])</code> can be treated as <code>df.loc(:, [..]).assign(..)</code> in <code>Pandas</code>.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .select(pl.col(\"nrs\"),\n                  (pl.col(\"nrs\") + 1).alias(\"add1\"),\n                  (pl.col(\"nrs\") - 1).alias(\"sub1\"),\n                  (pl.col(\"nrs\") * 2).alias(\"mul2\"),\n                  (pl.col(\"nrs\") / 3).alias(\"div3\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 add1 \u2506 sub1 \u2506 mul2 \u2506 div3     \u2502\n\u2502 --- \u2506 ---  \u2506 ---  \u2506 ---  \u2506 ---      \u2502\n\u2502 i64 \u2506 i64  \u2506 i64  \u2506 i64  \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 2    \u2506 0    \u2506 2    \u2506 0.333333 \u2502\n\u2502 2   \u2506 3    \u2506 1    \u2506 4    \u2506 0.666667 \u2502\n\u2502 3   \u2506 4    \u2506 2    \u2506 6    \u2506 1.0      \u2502\n\u2502 4   \u2506 5    \u2506 3    \u2506 8    \u2506 1.333333 \u2502\n\u2502 5   \u2506 6    \u2506 4    \u2506 10   \u2506 1.666667 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .loc[:, [\"nrs\"]]\n          .assign(add1=lambda df_: df_.nrs + 1,\n                  sub1=lambda df_: df_.nrs - 1,\n                  mul2=lambda df_: df_.nrs * 2,\n                  div3=lambda df_: df_.nrs / 3)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs  add1  sub1  mul2      div3\n0    1     2     0     2  0.333333\n1    2     3     1     4  0.666667\n2    3     4     2     6  1.000000\n3    4     5     3     8  1.333333\n4    5     6     4    10  1.666667\n</code></pre> </p>"},{"location":"contexts/select/#generalized-form","title":"Generalized form","text":"<p>It's worth noting that <code>pl.select([..])</code> can also be used to create columns. Therefore, the behavior of <code>pl.select([..])</code> is akin to <code>df.assign(..).drop(columns=..)</code> in <code>Pandas</code>.\"</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .select((pl.col(\"nrs\") + 1).alias(\"add1\"),\n                  (pl.col(\"nrs\") - 1).alias(\"sub1\"),\n                  (pl.col(\"nrs\") * 2).alias(\"mul2\"),\n                  (pl.col(\"nrs\") / 3).alias(\"div3\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 add1 \u2506 sub1 \u2506 mul2 \u2506 div3     \u2502\n\u2502 ---  \u2506 ---  \u2506 ---  \u2506 ---      \u2502\n\u2502 i64  \u2506 i64  \u2506 i64  \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2    \u2506 0    \u2506 2    \u2506 0.333333 \u2502\n\u2502 3    \u2506 1    \u2506 4    \u2506 0.666667 \u2502\n\u2502 4    \u2506 2    \u2506 6    \u2506 1.0      \u2502\n\u2502 5    \u2506 3    \u2506 8    \u2506 1.333333 \u2502\n\u2502 6    \u2506 4    \u2506 10   \u2506 1.666667 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(add1=lambda df_: df_.nrs + 1,\n                  sub1=lambda df_: df_.nrs - 1,\n                  mul2=lambda df_: df_.nrs * 2,\n                  div3=lambda df_: df_.nrs / 3)\n          .drop(columns=df_pd.columns)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   add1  sub1  mul2      div3\n0     2     0     2  0.333333\n1     3     1     4  0.666667\n2     4     2     6  1.000000\n3     5     3     8  1.333333\n4     6     4    10  1.666667\n</code></pre> </p>"},{"location":"contexts/select/#example","title":"Example","text":"<p>While this example appears straightforward in <code>Polars</code>, there are some nuances in <code>Pandas</code>. Let's explore them.</p> PolarsPandas <pre><code>out_pl = (df_pl.select(\n    pl.col(\"nrs\").sum(),\n    pl.col(\"names\").sort(),\n    pl.col(\"names\").first().alias(\"first name\"),\n    (pl.col(\"nrs\").mean() * 10).alias(\"10xnrs\"))\n)\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 first name \u2506 10xnrs \u2502\n\u2502 --- \u2506 ---   \u2506 ---        \u2506 ---    \u2502\n\u2502 i64 \u2506 str   \u2506 str        \u2506 f64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 15  \u2506 baz   \u2506 foo        \u2506 30.0   \u2502\n\u2502 15  \u2506 egg   \u2506 foo        \u2506 30.0   \u2502\n\u2502 15  \u2506 foo   \u2506 foo        \u2506 30.0   \u2502\n\u2502 15  \u2506 ham   \u2506 foo        \u2506 30.0   \u2502\n\u2502 15  \u2506 spam  \u2506 foo        \u2506 30.0   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(**{\n              \"nrs\": lambda df_: df_.nrs.sum(),\n              \"names\": lambda df_: df_.names.sort_values().reset_index(drop=True),\n              \"first name\": lambda _: df_pd.names.iloc[0],\n              \"10xnrs\": lambda _: df_pd.nrs.mean() * 10})\n          .drop(columns=df_pd.columns.drop([\"nrs\", \"names\"]))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs names first name  10xnrs\n0   15   baz        foo    30.0\n1   15   egg        foo    30.0\n2   15   foo        foo    30.0\n3   15   ham        foo    30.0\n4   15  spam        foo    30.0\n</code></pre> </p> <p>It's noted that, since one of the column names contains a space ('first name'), we need to use a dictionary to store each column name as the key and the corresponding operation as the value. Then, we can unpack this dictionary in <code>pd.assign(..)</code>.</p> <p>Here's a breakdown of the operations:</p> <ul> <li>\"nrs\": This operation calculates the sum of the \"nrs\" column and broadcasts it to all rows.</li> <li>\"names\": This operation sorts the values in the \"names\" column. To realign the index, we use <code>df.reset_index(drop=True)</code>.</li> <li>\"first name\": This operation selects the first row value of the \"names\" column and broadcasts it to all rows. It's important to note that since we reassigned \"names\" in the previous line, we need to use the original <code>df_pd</code> to retrieve the \"names\" column.</li> <li>\"10xnrs\": This operation calculates the mean of the \"nrs\" column and broadcasts it to all rows. Similarly, since we reassigned \"nrs\" at the beginning, we need to use the original <code>df_pd</code> to retrieve the \"nrs\" column.</li> </ul> <p>Additionally, we use <code>.drop(columns=df_pd.columns.drop([\"nrs\", \"names\"]))</code> to drop the columns that haven't been reassigned.</p>"},{"location":"contexts/select/#tips","title":"Tips","text":"<ul> <li>Whenever you wish you could use <code>df.loc(..)</code>, <code>df.iloc(..)</code> or <code>df[..]</code> in <code>Polars</code>, you're likely looking for <code>pl.select([..])</code>. </li> <li>Notably, <code>pl.select([..])</code> not only lets you select columns but also enables you to create new columns simultaneously.</li> </ul>"},{"location":"contexts/select/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"contexts/with_columns/","title":"pl.with_columns()","text":"<p><code>pl.with_columns([..])</code> allows you to create new columns in parallel. Unlike <code>pl.select([..])</code>, it adds the newly created columns to the original dataframe instead of dropping them.</p>"},{"location":"contexts/with_columns/#setup","title":"Setup","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport polars as pl\n\nnp.random.seed(42)\ndata = {\n    \"nrs\": [1, 2, 3, 4, 5],\n    \"random\": np.random.rand(5)\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 random   \u2502\n\u2502 --- \u2506 ---      \u2502\n\u2502 i64 \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 0.37454  \u2502\n\u2502 2   \u2506 0.950714 \u2502\n\u2502 3   \u2506 0.731994 \u2502\n\u2502 4   \u2506 0.598658 \u2502\n\u2502 5   \u2506 0.156019 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>   nrs    random\n0    1  0.374540\n1    2  0.950714\n2    3  0.731994\n3    4  0.598658\n4    5  0.156019\n</code></pre> </p>"},{"location":"contexts/with_columns/#example","title":"Example","text":"<p>The behavior of <code>pl.with_columns([..])</code> can be treated as <code>df.assign(..)</code> in <code>Pandas</code>.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .with_columns(pl.sum(\"nrs\").alias(\"nrs_sum\"),\n                        pl.col(\"random\").count().alias(\"count\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 random   \u2506 nrs_sum \u2506 count \u2502\n\u2502 --- \u2506 ---      \u2506 ---     \u2506 ---   \u2502\n\u2502 i64 \u2506 f64      \u2506 i64     \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 0.37454  \u2506 15      \u2506 5     \u2502\n\u2502 2   \u2506 0.950714 \u2506 15      \u2506 5     \u2502\n\u2502 3   \u2506 0.731994 \u2506 15      \u2506 5     \u2502\n\u2502 4   \u2506 0.598658 \u2506 15      \u2506 5     \u2502\n\u2502 5   \u2506 0.156019 \u2506 15      \u2506 5     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(nrs_sum=lambda df_: df_.nrs.sum(),\n                  count=lambda df_: df_.random.count())\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs    random  nrs_sum  count\n0    1  0.374540       15      5\n1    2  0.950714       15      5\n2    3  0.731994       15      5\n3    4  0.598658       15      5\n4    5  0.156019       15      5\n</code></pre> </p>"},{"location":"contexts/with_columns/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/aggregation/","title":"Aggregation","text":""},{"location":"expressions/aggregation/#setup","title":"Setup","text":"<pre><code>from datetime import date\n\nimport pandas as pd\nimport polars as pl\n\npl.enable_string_cache()\nurl = \"https://theunitedstates.io/congress-legislators/legislators-historical.csv\"\n</code></pre> Polars_dfPandas_df <pre><code>dtypes = {\n    \"first_name\": pl.Categorical,\n    \"gender\": pl.Categorical,\n    \"type\": pl.Categorical,\n    \"state\": pl.Categorical,\n    \"party\": pl.Categorical,\n}\n\n\ndf_pl = (pl\n         .read_csv(url, dtypes=dtypes)\n         .with_columns(\n             pl.col(\"birthday\").str.to_date(strict=False))\n         )\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (12_139, 36)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 last_name \u2506 first_name \u2506 middle_name \u2506 suffix \u2506 \u2026 \u2506 ballotpedia_id   \u2506 washington_post_ \u2506 icpsr_id \u2506 wikipedia_id    \u2502\n\u2502 ---       \u2506 ---        \u2506 ---         \u2506 ---    \u2506   \u2506 ---              \u2506 id               \u2506 ---      \u2506 ---             \u2502\n\u2502 str       \u2506 cat        \u2506 str         \u2506 str    \u2506   \u2506 str              \u2506 ---              \u2506 i64      \u2506 str             \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506 str              \u2506          \u2506                 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Bassett   \u2506 Richard    \u2506 null        \u2506 null   \u2506 \u2026 \u2506 null             \u2506 null             \u2506 507      \u2506 Richard Bassett \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506                  \u2506          \u2506 (Delaware       \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506                  \u2506          \u2506 politi\u2026         \u2502\n\u2502 Bland     \u2506 Theodorick \u2506 null        \u2506 null   \u2506 \u2026 \u2506 null             \u2506 null             \u2506 786      \u2506 Theodorick      \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506                  \u2506          \u2506 Bland           \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506                  \u2506          \u2506 (congressman)   \u2502\n\u2502 Burke     \u2506 Aedanus    \u2506 null        \u2506 null   \u2506 \u2026 \u2506 null             \u2506 null             \u2506 1260     \u2506 Aedanus Burke   \u2502\n\u2502 Carroll   \u2506 Daniel     \u2506 null        \u2506 null   \u2506 \u2026 \u2506 null             \u2506 null             \u2506 1538     \u2506 Daniel Carroll  \u2502\n\u2502 \u2026         \u2506 \u2026          \u2506 \u2026           \u2506 \u2026      \u2506 \u2026 \u2506 \u2026                \u2506 \u2026                \u2506 \u2026        \u2506 \u2026               \u2502\n\u2502 Sasse     \u2506 Benjamin   \u2506 Eric        \u2506 null   \u2506 \u2026 \u2506 Ben Sasse        \u2506 null             \u2506 41503    \u2506 Ben Sasse       \u2502\n\u2502 Feinstein \u2506 Dianne     \u2506 null        \u2506 null   \u2506 \u2026 \u2506 Dianne Feinstein \u2506 null             \u2506 49300    \u2506 Dianne          \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506                  \u2506          \u2506 Feinstein       \u2502\n\u2502 Cicilline \u2506 David      \u2506 N.          \u2506 null   \u2506 \u2026 \u2506 David N.         \u2506 null             \u2506 21172    \u2506 David Cicilline \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506 Cicilline        \u2506                  \u2506          \u2506                 \u2502\n\u2502 Stewart   \u2506 Chris      \u2506 null        \u2506 null   \u2506 \u2026 \u2506 Chris Stewart    \u2506 null             \u2506 21367    \u2506 Chris Stewart   \u2502\n\u2502           \u2506            \u2506             \u2506        \u2506   \u2506                  \u2506                  \u2506          \u2506 (politician)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>dtype = {\n    \"first_name\": \"category\",\n    \"gender\": \"category\",\n    \"type\": \"category\",\n    \"state\": \"category\",\n    \"party\": \"category\",\n}\ndf_pd = (pd\n         .read_csv(url, dtype=dtype)\n         .assign(birthday=lambda df_: pd.to_datetime(df_.birthday, errors=\"coerce\"))\n         )\nprint(df_pd)\n</code></pre> <p><pre><code>       last_name  first_name middle_name  ... washington_post_id icpsr_id                           wikipedia_id\n0        Bassett     Richard         NaN  ...                NaN    507.0  Richard Bassett (Delaware politician)\n1          Bland  Theodorick         NaN  ...                NaN    786.0         Theodorick Bland (congressman)\n2          Burke     Aedanus         NaN  ...                NaN   1260.0                          Aedanus Burke\n3        Carroll      Daniel         NaN  ...                NaN   1538.0                         Daniel Carroll\n4         Clymer      George         NaN  ...                NaN   1859.0                          George Clymer\n...          ...         ...         ...  ...                ...      ...                                    ...\n12134     Inhofe       James          M.  ...                NaN  15424.0                             Jim Inhofe\n12135      Sasse    Benjamin        Eric  ...                NaN  41503.0                              Ben Sasse\n12136  Feinstein      Dianne         NaN  ...                NaN  49300.0                       Dianne Feinstein\n12137  Cicilline       David          N.  ...                NaN  21172.0                        David Cicilline\n12138    Stewart       Chris         NaN  ...                NaN  21367.0             Chris Stewart (politician)\n\n[12139 rows x 36 columns]\n</code></pre> </p>"},{"location":"expressions/aggregation/#basic-aggregations","title":"Basic aggregations","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .lazy()\n          .group_by(\"first_name\")\n          .agg(pl.count(),\n               pl.col(\"gender\"),\n               pl.first(\"last_name\"))\n          .sort(\"count\", descending=True)\n          .limit(5)\n          .collect()\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 first_name \u2506 count \u2506 gender            \u2506 last_name \u2502\n\u2502 ---        \u2506 ---   \u2506 ---               \u2506 ---       \u2502\n\u2502 cat        \u2506 u32   \u2506 list[cat]         \u2506 str       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 John       \u2506 1256  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Walker    \u2502\n\u2502 William    \u2506 1022  \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Few       \u2502\n\u2502 James      \u2506 714   \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Armstrong \u2502\n\u2502 Thomas     \u2506 454   \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Tucker    \u2502\n\u2502 Charles    \u2506 439   \u2506 [\"M\", \"M\", \u2026 \"M\"] \u2506 Carroll   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(count=lambda df_: 0)\n          .groupby(\"first_name\", observed=True)\n          .agg(count=(\"first_name\", \"size\"),\n               gender=(\"gender\", list),\n               last_name=(\"last_name\", \"first\"))\n          .sort_values(\"count\", ascending=False)\n          .reset_index()\n          .head(5)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>  first_name  count                                             gender  last_name\n0       John   1256  [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, ...     Walker\n1    William   1022  [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, ...        Few\n2      James    714  [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, ...  Armstrong\n3     Thomas    454  [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, ...     Tucker\n4    Charles    439  [M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, ...    Carroll\n</code></pre> </p>"},{"location":"expressions/aggregation/#conditionals","title":"Conditionals","text":""},{"location":"expressions/aggregation/#type-1","title":"Type 1","text":"<p>While the <code>pro</code> column is correctly sorted in <code>Pandas</code>, the order of the <code>state</code> and <code>anti</code> columns does not entirely match the result in <code>Polars</code>.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .lazy()\n          .group_by(\"state\")\n          .agg((pl.col(\"party\") == \"Anti-Administration\").sum().alias(\"anti\"),\n               (pl.col(\"party\") == \"Pro-Administration\").sum().alias(\"pro\"))\n          .sort(\"pro\", descending=True)\n          .limit(5)\n          .collect()\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 anti \u2506 pro \u2502\n\u2502 ---   \u2506 ---  \u2506 --- \u2502\n\u2502 cat   \u2506 u32  \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 CT    \u2506 0    \u2506 3   \u2502\n\u2502 NJ    \u2506 0    \u2506 3   \u2502\n\u2502 NC    \u2506 1    \u2506 2   \u2502\n\u2502 SC    \u2506 0    \u2506 1   \u2502\n\u2502 PA    \u2506 1    \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .groupby(\"state\", observed=True)\n          .agg(anti=(\"party\", lambda s_: (s_ == \"Anti-Administration\").sum()),\n               pro=(\"party\", lambda s_: (s_ == \"Pro-Administration\").sum()))\n          .sort_values(\"pro\", ascending=False)\n          .reset_index()\n          .head(5)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>  state  anti  pro\n0    CT     0    3\n1    NJ     0    3\n2    NC     1    2\n3    SC     0    1\n4    PA     1    1\n</code></pre> </p>"},{"location":"expressions/aggregation/#type-2","title":"Type 2","text":"<p>While the <code>count</code> column is correctly sorted in <code>Pandas</code>, the order of the <code>state</code> and <code>party</code> columns does not entirely match the result in <code>Polars</code>.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .lazy()\n          .group_by(\"state\", \"party\")\n          .agg(pl.count(\"party\").alias(\"count\"))\n          .filter(\n              (pl.col(\"party\") == \"Anti-Administration\")\n              | (pl.col(\"party\") == \"Pro-Administration\")\n          )\n          .sort(\"count\", descending=True)\n          .limit(5)\n          .collect()\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 party               \u2506 count \u2502\n\u2502 ---   \u2506 ---                 \u2506 ---   \u2502\n\u2502 cat   \u2506 cat                 \u2506 u32   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 CT    \u2506 Pro-Administration  \u2506 3     \u2502\n\u2502 VA    \u2506 Anti-Administration \u2506 3     \u2502\n\u2502 NJ    \u2506 Pro-Administration  \u2506 3     \u2502\n\u2502 NC    \u2506 Pro-Administration  \u2506 2     \u2502\n\u2502 SC    \u2506 Pro-Administration  \u2506 1     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .groupby([\"state\", \"party\"], observed=True)\n          .agg(count=(\"party\", \"size\"))\n          .query(\"party == 'Anti-Administration' | party == 'Pro-Administration' \")\n          .reset_index()\n          .sort_values(\"count\", ascending=False)\n          .reset_index(drop=True)\n          .head(5)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>  state                party  count\n0    CT   Pro-Administration      3\n1    NJ   Pro-Administration      3\n2    VA  Anti-Administration      3\n3    NC   Pro-Administration      2\n4    GA  Anti-Administration      1\n</code></pre> </p>"},{"location":"expressions/aggregation/#filtering","title":"Filtering","text":"PolarsPandas <pre><code>def compute_age() -&gt; pl.Expr:\n    return date(2021, 1, 1).year - pl.col(\"birthday\").dt.year()\n\n\ndef avg_birthday(gender: str) -&gt; pl.Expr:\n    return (\n        compute_age()\n        .filter(pl.col(\"gender\") == gender)\n        .mean()\n        .alias(f\"avg {gender} birthday\")\n    )\n\n\nout_pl = (df_pl\n          .lazy()\n          .group_by(\"state\")\n          .agg(avg_birthday(\"M\"),\n               avg_birthday(\"F\"),\n               (pl.col(\"gender\") == \"M\").sum().alias(\"# male\"),\n               (pl.col(\"gender\") == \"F\").sum().alias(\"# female\"))\n          .filter(pl.col(\"state\").is_in([\"AR\", \"MD\", \"HI\", \"ME\", \"RI\"]))\n          .collect()\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 avg M birthday \u2506 avg F birthday \u2506 # male \u2506 # female \u2502\n\u2502 ---   \u2506 ---            \u2506 ---            \u2506 ---    \u2506 ---      \u2502\n\u2502 cat   \u2506 f64            \u2506 f64            \u2506 u32    \u2506 u32      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 MD    \u2506 187.280899     \u2506 93.375         \u2506 298    \u2506 8        \u2502\n\u2502 HI    \u2506 113.25         \u2506 83.6           \u2506 20     \u2506 5        \u2502\n\u2502 ME    \u2506 191.707602     \u2506 99.0           \u2506 173    \u2506 2        \u2502\n\u2502 RI    \u2506 192.514286     \u2506 74.0           \u2506 108    \u2506 1        \u2502\n\u2502 AR    \u2506 154.073394     \u2506 121.4          \u2506 112    \u2506 5        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>def _rename_and_reorder_cols(df_):\n    df_.columns = [\"avg F birthday\", \"avg M birthday\", \"# female\", \"# male\"]\n    return df_.loc[:, [\"avg M birthday\", \"avg F birthday\", \"# male\", \"# female\"]]\n\n\nout_pd = (df_pd\n          .groupby([\"state\", \"gender\"], observed=True)\n          .agg(birthday=(\"birthday\", lambda s_: (date(2021, 1, 1).year - s_.dt.year).mean()),\n               count=(\"gender\", \"size\"))\n          .unstack(level=\"gender\")\n          .pipe(_rename_and_reorder_cols)\n          .sort_values(\"# male\", ascending=False)\n          .loc[[\"AR\", \"MD\", \"HI\", \"ME\", \"RI\"], :]\n          .reset_index()\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>  state  avg M birthday  avg F birthday  # male  # female\n0    AR      154.073394         121.400   112.0       5.0\n1    MD      187.280899          93.375   298.0       8.0\n2    HI      113.250000          83.600    20.0       5.0\n3    ME      191.707602          99.000   173.0       2.0\n4    RI      192.514286          74.000   108.0       1.0\n</code></pre> </p>"},{"location":"expressions/aggregation/#sorting","title":"Sorting","text":"PolarsPandas <pre><code>def get_person() -&gt; pl.Expr:\n    return pl.col(\"first_name\") + pl.lit(\" \") + pl.col(\"last_name\")\n\n\nout_pl = (df_pl\n          .lazy()\n          .with_columns(pl.col(\"first_name\").cat.set_ordering(\"lexical\"))\n          .sort(\"birthday\", descending=True)\n          .group_by(\"state\")\n          .agg(get_person().first().alias(\"youngest\"),\n               get_person().last().alias(\"oldest\"),\n               get_person().sort().first().alias(\"alphabetical_first\"),\n               pl.col(\"gender\").sort_by(\"first_name\").first().alias(\"gender\"))\n          .with_columns(pl.col(\"state\").cat.set_ordering(\"lexical\"))\n          .sort(\"state\")\n          .limit(5)\n          .collect()\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 state \u2506 youngest         \u2506 oldest         \u2506 alphabetical_first \u2506 gender \u2502\n\u2502 ---   \u2506 ---              \u2506 ---            \u2506 ---                \u2506 ---    \u2502\n\u2502 cat   \u2506 str              \u2506 str            \u2506 str                \u2506 cat    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 AK    \u2506 Mark Begich      \u2506 Thomas Cale    \u2506 Anthony Dimond     \u2506 M      \u2502\n\u2502 AL    \u2506 Martha Roby      \u2506 John McKee     \u2506 Albert Goodwyn     \u2506 M      \u2502\n\u2502 AR    \u2506 Tim Griffin      \u2506 Archibald Yell \u2506 Albert Rust        \u2506 M      \u2502\n\u2502 AS    \u2506 Eni Faleomavaega \u2506 Fof\u00f3 Sunia     \u2506 Eni Faleomavaega   \u2506 M      \u2502\n\u2502 AZ    \u2506 Ben Quayle       \u2506 Coles Bashford \u2506 Ann Kirkpatrick    \u2506 F      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>def get_alpha_info(s_):\n    sorted_s = s_.sort_values()\n    return '___'.join([sorted_s.iloc[0], str(sorted_s.index[0])])\n\n\ndef _create_alpha_cols(df_):\n    return (df_\n            .alpha_info.str.split('___', expand=True)\n            .rename(columns={0: \"alphabetical_first\", 1: \"alpha_index\"})\n            .assign(alpha_index=lambda df2_: df2_.alpha_index.astype(\"int64\"))\n            )\n\n\ndef _process_alpha_gender(df_):\n    return (pd\n            .concat([df_, _create_alpha_cols(df_)], axis=\"columns\")\n            .assign(gender=lambda df_: df_pd.loc[df_.alpha_index.tolist(), [\"gender\", \"state\"]].set_index(\"state\").gender)\n            .drop(columns=[\"alpha_info\", \"alpha_index\"])\n            )\n\n\nout_pd = (df_pd\n          .assign(shown_name=lambda df_: df_.first_name.astype(str) + ' ' + df_.last_name.astype(str))\n          .sort_values(\"birthday\", ascending=False)\n          .groupby(\"state\", observed=True)\n          .agg(youngest=(\"shown_name\", \"first\"),\n               oldest=(\"shown_name\", \"last\"),\n               alpha_info=(\"shown_name\", get_alpha_info))\n          .pipe(_process_alpha_gender)\n          .sort_index()\n          .reset_index()\n          .head()\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>  state          youngest             oldest alphabetical_first gender\n0    AK       Mark Begich        Thomas Cale     Anthony Dimond      M\n1    AL       Martha Roby     Thomas Haughey     Albert Goodwyn      M\n2    AR       Tim Griffin  William Sebastian        Albert Rust      M\n3    AS  Eni Faleomavaega         Fof\u00f3 Sunia   Eni Faleomavaega      M\n4    AZ        Ben Quayle     Coles Bashford    Ann Kirkpatrick      F\n</code></pre> </p>"},{"location":"expressions/aggregation/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/casting/","title":"Casting","text":"<p><code>pl.Expr.cast</code> serves as the primary function for type conversion in Polars. It includes a keyword argument, <code>strict</code>,  which, by default, is set to <code>True</code> and will raise an exception if a conversion error occurs. Alternatively, you can set <code>strict=False</code>. In this case, if a conversion error occurs, the values will be set to <code>null</code>.</p>"},{"location":"expressions/casting/#setup","title":"Setup","text":"<pre><code>import pandas as pd\nimport polars as pl\n\ndata = {\n    \"integers\": [1, 2, 3, 4, 5],\n    \"big_integers\": [1, 10000002, 3, 10000004, 10000005],\n    \"floats\": [4.0, 5.0, 6.0, 7.0, 8.0],\n    \"floats_with_decimal\": [4.532, 5.5, 6.5, 7.5, 8.5],\n    \"floats_as_string\": [\"4.0\", \"5.0\", \"6.0\", \"7.0\", \"8.0\"],\n    \"strings_not_float\": [\"4.0\", \"not_a_number\", \"6.0\", \"7.0\", \"8.0\"],\n    \"bools\": [True, False, True, False, True],\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers \u2506 big_integers \u2506 floats \u2506 floats_with_decimal \u2506 floats_as_string \u2506 strings_not_float \u2506 bools \u2502\n\u2502 ---      \u2506 ---          \u2506 ---    \u2506 ---                 \u2506 ---              \u2506 ---               \u2506 ---   \u2502\n\u2502 i64      \u2506 i64          \u2506 f64    \u2506 f64                 \u2506 str              \u2506 str               \u2506 bool  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1        \u2506 1            \u2506 4.0    \u2506 4.532               \u2506 4.0              \u2506 4.0               \u2506 true  \u2502\n\u2502 2        \u2506 10000002     \u2506 5.0    \u2506 5.5                 \u2506 5.0              \u2506 not_a_number      \u2506 false \u2502\n\u2502 3        \u2506 3            \u2506 6.0    \u2506 6.5                 \u2506 6.0              \u2506 6.0               \u2506 true  \u2502\n\u2502 4        \u2506 10000004     \u2506 7.0    \u2506 7.5                 \u2506 7.0              \u2506 7.0               \u2506 false \u2502\n\u2502 5        \u2506 10000005     \u2506 8.0    \u2506 8.5                 \u2506 8.0              \u2506 8.0               \u2506 true  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd.dtypes, end='\\n'*2)\nprint(df_pd)\n</code></pre> <p><pre><code>integers                 int64\nbig_integers             int64\nfloats                 float64\nfloats_with_decimal    float64\nfloats_as_string        object\nstrings_not_float       object\nbools                     bool\ndtype: object\n\n   integers  big_integers  floats  floats_with_decimal floats_as_string strings_not_float  bools\n0         1             1     4.0                4.532              4.0               4.0   True\n1         2      10000002     5.0                5.500              5.0      not_a_number  False\n2         3             3     6.0                6.500              6.0               6.0   True\n3         4      10000004     7.0                7.500              7.0               7.0  False\n4         5      10000005     8.0                8.500              8.0               8.0   True\n</code></pre> </p>"},{"location":"expressions/casting/#numerics","title":"Numerics","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select(\n              pl.col(\"integers\").cast(pl.Float32).alias(\"integers_as_floats\"),\n              pl.col(\"floats\").cast(pl.Int32).alias(\"floats_as_integers\"),\n              pl.col(\"floats_with_decimal\")\n              .cast(pl.Int32)\n              .alias(\"floats_with_decimal_as_integers\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers_as_floats \u2506 floats_as_integers \u2506 floats_with_decimal_as_integers \u2502\n\u2502 ---                \u2506 ---                \u2506 ---                             \u2502\n\u2502 f32                \u2506 i32                \u2506 i32                             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0                \u2506 4                  \u2506 4                               \u2502\n\u2502 2.0                \u2506 5                  \u2506 5                               \u2502\n\u2502 3.0                \u2506 6                  \u2506 6                               \u2502\n\u2502 4.0                \u2506 7                  \u2506 7                               \u2502\n\u2502 5.0                \u2506 8                  \u2506 8                               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(\n              integers_as_floats=lambda df_: df_.integers.astype(\"float32\"),\n              floats_as_integers=lambda df_: df_.floats.astype(\"int32\"),\n              floats_with_decimal_as_integers=lambda df_: df_.floats_with_decimal.astype(\n                  \"int32\"))\n          .drop(columns=df_pd.columns)\n          )\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>integers_as_floats                 float32\nfloats_as_integers                   int32\nfloats_with_decimal_as_integers      int32\ndtype: object\n\n   integers_as_floats  floats_as_integers  floats_with_decimal_as_integers\n0                 1.0                   4                                4\n1                 2.0                   5                                5\n2                 3.0                   6                                6\n3                 4.0                   7                                7\n4                 5.0                   8                                8\n</code></pre> </p>"},{"location":"expressions/casting/#downcast","title":"Downcast","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select(\n              pl.col(\"integers\").cast(pl.Int16).alias(\n                  \"integers_smallfootprint\"),\n              pl.col(\"floats\").cast(pl.Float32).alias(\"floats_smallfootprint\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers_smallfootprint \u2506 floats_smallfootprint \u2502\n\u2502 ---                     \u2506 ---                   \u2502\n\u2502 i16                     \u2506 f32                   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1                       \u2506 4.0                   \u2502\n\u2502 2                       \u2506 5.0                   \u2502\n\u2502 3                       \u2506 6.0                   \u2502\n\u2502 4                       \u2506 7.0                   \u2502\n\u2502 5                       \u2506 8.0                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(\n              integers_smallfootprint=lambda df_: df_.integers.astype(\"int16\"),\n              floats_smallfootprint=lambda df_: df_.floats.astype(\"float32\"))\n          .drop(columns=df_pd.columns)\n          )\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>integers_smallfootprint      int16\nfloats_smallfootprint      float32\ndtype: object\n\n   integers_smallfootprint  floats_smallfootprint\n0                        1                    4.0\n1                        2                    5.0\n2                        3                    6.0\n3                        4                    7.0\n4                        5                    8.0\n</code></pre> </p>"},{"location":"expressions/casting/#overflow","title":"Overflow","text":"PolarsPandas <p>strict=True</p> <pre><code>try:\n    out_pl = df_pl.select(pl.col(\"big_integers\").cast(pl.Int8))\n    print(out_pl)\nexcept Exception as e:\n    print(e)\n</code></pre> <p><pre><code>strict conversion from `i64` to `i8` failed for column: big_integers, value(s) [10000002, 10000004, 10000005]; if you were trying to cast Utf8 to temporal dtypes, consider using `strptime`\n</code></pre> </p> <p>strict=False</p> <pre><code>out_pl = df_pl.select(pl.col(\"big_integers\").cast(pl.Int8, strict=False))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 big_integers \u2502\n\u2502 ---          \u2502\n\u2502 i8           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1            \u2502\n\u2502 null         \u2502\n\u2502 3            \u2502\n\u2502 null         \u2502\n\u2502 null         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><code>pd.Series.astype(..)</code></p> <p>This behavior might not be as you expected.</p> <pre><code>out_pd = (df_pd\n          .assign(big_integers=lambda df_: df_.big_integers.astype(\"int8\"))\n          .drop(columns=df_pd.columns.drop([\"big_integers\"]))\n          )\n\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>big_integers    int8\ndtype: object\n\n   big_integers\n0             1\n1          -126\n2             3\n3          -124\n4          -123\n</code></pre> </p> <p><code>pd.to_numeric(.., downcast=..)</code></p> <p>Alternatively, <code>pd.to_numeric</code> will do its best to downcast the resulting data to the smallest numerical dtype as specified in the <code>downcast</code> parameter.</p> <pre><code>out_pd = (df_pd\n          .assign(big_integers=lambda df_: pd.to_numeric(df_.big_integers, downcast=\"integer\"))\n          .drop(columns=df_pd.columns.drop([\"big_integers\"]))\n          )\n\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>big_integers    int32\ndtype: object\n\n   big_integers\n0             1\n1      10000002\n2             3\n3      10000004\n4      10000005\n</code></pre> The type of <code>big_integers</code> is converted from <code>int64</code> to <code>int32</code>. </p>"},{"location":"expressions/casting/#strings","title":"Strings","text":""},{"location":"expressions/casting/#numeric-values","title":"Numeric values","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select(pl.col(\"integers\").cast(pl.Utf8),\n                  pl.col(\"floats\").cast(pl.Utf8),\n                  pl.col(\"floats_as_string\").cast(pl.Float64))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers \u2506 floats \u2506 floats_as_string \u2502\n\u2502 ---      \u2506 ---    \u2506 ---              \u2502\n\u2502 str      \u2506 str    \u2506 f64              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1        \u2506 4.0    \u2506 4.0              \u2502\n\u2502 2        \u2506 5.0    \u2506 5.0              \u2502\n\u2502 3        \u2506 6.0    \u2506 6.0              \u2502\n\u2502 4        \u2506 7.0    \u2506 7.0              \u2502\n\u2502 5        \u2506 8.0    \u2506 8.0              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(integers=lambda df_: df_.integers.astype(str),\n                  floats=lambda df_: df_.floats.astype(str),\n                  floats_as_string=lambda df_: df_.floats_as_string.astype(\"float64\"))\n          .drop(columns=df_pd.columns.drop([\"integers\", \"floats\", \"floats_as_string\"]))\n          )\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>integers             object\nfloats               object\nfloats_as_string    float64\ndtype: object\n\n  integers floats  floats_as_string\n0        1    4.0               4.0\n1        2    5.0               5.0\n2        3    6.0               6.0\n3        4    7.0               7.0\n4        5    8.0               8.0\n</code></pre> </p>"},{"location":"expressions/casting/#non-numeric-values","title":"Non-numeric values","text":"<ul> <li> <p>The behavior of <code>pl.col().cast(.., strict=True)</code> in <code>Polars</code> behaves similarly to <code>pd.to_numeric(.., errors=raise)</code> in <code>Pandas</code> in this example.</p> </li> <li> <p>The behavior of <code>pl.col().cast(.., strict=False)</code> in <code>Polars</code> behaves similarly to <code>pd.to_numeric(.., errors=coerce)</code> in <code>Pandas</code> in this example.</p> </li> </ul> PolarsPandas <p>strict=True</p> <pre><code>try:\n    out_pl = df_pl.select(pl.col(\"strings_not_float\").cast(pl.Float64))\n    print(out_pl)\nexcept Exception as e:\n    print(e)\n</code></pre> <p><pre><code>strict conversion from `str` to `f64` failed for column: strings_not_float, value(s) [\"not_a_number\"]; if you were trying to cast Utf8 to temporal dtypes, consider using `strptime`\n</code></pre> </p> <p>strict=False</p> <pre><code>out_pl = df_pl.select(\n    pl.col(\"strings_not_float\").cast(pl.Float64, strict=False))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 strings_not_float \u2502\n\u2502 ---               \u2502\n\u2502 f64               \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 4.0               \u2502\n\u2502 null              \u2502\n\u2502 6.0               \u2502\n\u2502 7.0               \u2502\n\u2502 8.0               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p>erros=raise <pre><code>try:\n    out_pd = (df_pd\n              .assign(strings_not_float=lambda df_: pd.to_numeric(df_.strings_not_float))\n              .drop(columns=df_pd.columns.drop([\"strings_not_float\"]))\n              )\n    print(out_pd)\nexcept Exception as e:\n    print(e)\n</code></pre></p> <p><pre><code>Unable to parse string \"not_a_number\" at position 1\n</code></pre> </p> <p>erros=coerce</p> <pre><code>out_pd = (df_pd\n          .assign(strings_not_float=lambda df_: pd.to_numeric(df_.strings_not_float, errors='coerce'))\n          .drop(columns=df_pd.columns.drop([\"strings_not_float\"]))\n          )\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>strings_not_float    float64\ndtype: object\n\n   strings_not_float\n0                4.0\n1                NaN\n2                6.0\n3                7.0\n4                8.0\n</code></pre> </p>"},{"location":"expressions/casting/#booleans","title":"Booleans","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select(pl.col(\"integers\").cast(pl.Boolean),\n                  pl.col(\"floats\").cast(pl.Boolean))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 integers \u2506 floats \u2502\n\u2502 ---      \u2506 ---    \u2502\n\u2502 bool     \u2506 bool   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 true     \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2502 true     \u2506 true   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(integers=lambda df_: df_.integers.astype(bool),\n                  floats=lambda df_: df_.floats.astype(bool))\n          .drop(columns=df_pd.columns.drop([\"integers\", \"floats\"]))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   integers  floats\n0      True    True\n1      True    True\n2      True    True\n3      True    True\n4      True    True\n</code></pre> </p>"},{"location":"expressions/casting/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/column_selections/","title":"Column selections","text":""},{"location":"expressions/column_selections/#setup","title":"Setup","text":"<pre><code>from datetime import date, datetime\n\nimport numpy as np\nimport pandas as pd\nimport polars as pl\nimport polars.selectors as cs\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = (pl.DataFrame(\n    {\"id\": [9, 4, 2],\n     \"place\": [\"Mars\", \"Earth\", \"Saturn\"],\n     \"date\": pl.date_range(date(2022, 1, 1), date(2022, 1, 3), \"1d\", eager=True),\n     \"sales\": [33.4, 2142134.1, 44.7],\n     \"has_people\": [False, True, False],\n     \"logged_at\": pl.datetime_range(datetime(2022, 12, 1),\n                                    datetime(2022, 12, 1, 0, 0, 2),\n                                    \"1s\",\n                                    eager=True)})\n    .with_row_count(\"rn\")\n)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (3, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 rn  \u2506 id  \u2506 place  \u2506 date       \u2506 sales     \u2506 has_people \u2506 logged_at           \u2502\n\u2502 --- \u2506 --- \u2506 ---    \u2506 ---        \u2506 ---       \u2506 ---        \u2506 ---                 \u2502\n\u2502 u32 \u2506 i64 \u2506 str    \u2506 date       \u2506 f64       \u2506 bool       \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 9   \u2506 Mars   \u2506 2022-01-01 \u2506 33.4      \u2506 false      \u2506 2022-12-01 00:00:00 \u2502\n\u2502 1   \u2506 4   \u2506 Earth  \u2506 2022-01-02 \u2506 2142134.1 \u2506 true       \u2506 2022-12-01 00:00:01 \u2502\n\u2502 2   \u2506 2   \u2506 Saturn \u2506 2022-01-03 \u2506 44.7      \u2506 false      \u2506 2022-12-01 00:00:02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = (pd.DataFrame(\n    {\"id\": [9, 4, 2],\n     \"place\": [\"Mars\", \"Earth\", \"Saturn\"],\n     \"date\": pd.date_range(\"2022-01-01\", \"2022-01-03\"),\n     \"sales\": [33.4, 2142134.1, 44.7],\n     \"has_people\": [False, True, False],\n     \"logged_at\": pd.date_range(\"2022-12-01\",\n                                \"2022-12-01 00:00:02\",\n                                freq=\"S\")})\n    .rename_axis(\"rn\").reset_index()\n)\nprint(df_pd)\n</code></pre> <p><pre><code>   rn  id   place       date      sales  has_people           logged_at\n0   0   9    Mars 2022-01-01       33.4       False 2022-12-01 00:00:00\n1   1   4   Earth 2022-01-02  2142134.1        True 2022-12-01 00:00:01\n2   2   2  Saturn 2022-01-03       44.7       False 2022-12-01 00:00:02\n</code></pre> </p>"},{"location":"expressions/column_selections/#expression-expansion","title":"Expression expansion","text":""},{"location":"expressions/column_selections/#select-all","title":"Select all","text":"PolarsPandas <pre><code>out_pl = df_pl.select(pl.all())  # or df_pl.select(pl.col(\"*\"))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 rn  \u2506 id  \u2506 place  \u2506 date       \u2506 sales     \u2506 has_people \u2506 logged_at           \u2502\n\u2502 --- \u2506 --- \u2506 ---    \u2506 ---        \u2506 ---       \u2506 ---        \u2506 ---                 \u2502\n\u2502 u32 \u2506 i64 \u2506 str    \u2506 date       \u2506 f64       \u2506 bool       \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 9   \u2506 Mars   \u2506 2022-01-01 \u2506 33.4      \u2506 false      \u2506 2022-12-01 00:00:00 \u2502\n\u2502 1   \u2506 4   \u2506 Earth  \u2506 2022-01-02 \u2506 2142134.1 \u2506 true       \u2506 2022-12-01 00:00:01 \u2502\n\u2502 2   \u2506 2   \u2506 Saturn \u2506 2022-01-03 \u2506 44.7      \u2506 false      \u2506 2022-12-01 00:00:02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = df_pd.loc[:, :]  # or df_pd.iloc[:, :]\nprint(out_pd)\n</code></pre> <p><pre><code>   rn  id   place       date      sales  has_people           logged_at\n0   0   9    Mars 2022-01-01       33.4       False 2022-12-01 00:00:00\n1   1   4   Earth 2022-01-02  2142134.1        True 2022-12-01 00:00:01\n2   2   2  Saturn 2022-01-03       44.7       False 2022-12-01 00:00:02\n</code></pre> </p>"},{"location":"expressions/column_selections/#exclude","title":"Exclude","text":"PolarsPandas <pre><code>out_pl = df_pl.select(pl.all().exclude(\"logged_at\", \"rn\"))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 place  \u2506 date       \u2506 sales     \u2506 has_people \u2502\n\u2502 --- \u2506 ---    \u2506 ---        \u2506 ---       \u2506 ---        \u2502\n\u2502 i64 \u2506 str    \u2506 date       \u2506 f64       \u2506 bool       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 9   \u2506 Mars   \u2506 2022-01-01 \u2506 33.4      \u2506 false      \u2502\n\u2502 4   \u2506 Earth  \u2506 2022-01-02 \u2506 2142134.1 \u2506 true       \u2502\n\u2502 2   \u2506 Saturn \u2506 2022-01-03 \u2506 44.7      \u2506 false      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = df_pd.drop([\"logged_at\", \"rn\"], axis=\"columns\")\nprint(out_pd)\n</code></pre> <p><pre><code>   id   place       date      sales  has_people\n0   9    Mars 2022-01-01       33.4       False\n1   4   Earth 2022-01-02  2142134.1        True\n2   2  Saturn 2022-01-03       44.7       False\n</code></pre> </p>"},{"location":"expressions/column_selections/#by-multiple-strings","title":"By multiple strings","text":"PolarsPandas <pre><code>out_pl = df_pl.select(pl.col(\"date\", \"logged_at\").dt.to_string(\"%Y-%h-%d\"))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 date        \u2506 logged_at   \u2502\n\u2502 ---         \u2506 ---         \u2502\n\u2502 str         \u2506 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2022-Jan-01 \u2506 2022-Dec-01 \u2502\n\u2502 2022-Jan-02 \u2506 2022-Dec-01 \u2502\n\u2502 2022-Jan-03 \u2506 2022-Dec-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .loc[:, [\"date\", \"logged_at\"]]\n          .assign(date=lambda df_: df_.date.dt.strftime(\"%Y-%h-%d\"),\n                  logged_at=lambda df_: df_.logged_at.dt.strftime(\"%Y-%h-%d\"))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>          date    logged_at\n0  2022-Jan-01  2022-Dec-01\n1  2022-Jan-02  2022-Dec-01\n2  2022-Jan-03  2022-Dec-01\n</code></pre> </p> <p>If there are dozens of columns that need manipulation, I will use the following approach instead.</p> <pre><code>columns = df_pd.select_dtypes('datetime').columns\nout_pd = (df_pd\n          .loc[:, columns]\n          .assign(**{col: lambda df_: df_[col].dt.strftime(\"%Y-%h-%d\")\n                     for col in columns})\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>          date    logged_at\n0  2022-Dec-01  2022-Dec-01\n1  2022-Dec-01  2022-Dec-01\n2  2022-Dec-01  2022-Dec-01\n</code></pre> </p>"},{"location":"expressions/column_selections/#by-regular-expressions","title":"By regular expressions","text":"PolarsPandas <pre><code>out_pl = df_pl.select(pl.col(\"^.*(as|sa).*$\"))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 sales     \u2506 has_people \u2502\n\u2502 ---       \u2506 ---        \u2502\n\u2502 f64       \u2506 bool       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 33.4      \u2506 false      \u2502\n\u2502 2142134.1 \u2506 true       \u2502\n\u2502 44.7      \u2506 false      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = df_pd.filter(regex=\"^.*(as|sa).*$\")\nprint(out_pd)\n</code></pre> <p><pre><code>       sales  has_people\n0       33.4       False\n1  2142134.1        True\n2       44.7       False\n</code></pre> </p>"},{"location":"expressions/column_selections/#by-data-type","title":"By data type","text":"PolarsPandas <pre><code>out_pl = df_pl.select(pl.col(pl.Int64, pl.UInt32, pl.Boolean).n_unique())\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 rn  \u2506 id  \u2506 has_people \u2502\n\u2502 --- \u2506 --- \u2506 ---        \u2502\n\u2502 u32 \u2506 u32 \u2506 u32        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 3   \u2506 3   \u2506 2          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .select_dtypes(['int64', 'bool'])\n          .agg(lambda s_: s_.unique().size)\n          .to_frame()\n          .T\n          )\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>rn            int64\nid            int64\nhas_people    int64\ndtype: object\n\n   rn  id  has_people\n0   3   3           2\n</code></pre> </p>"},{"location":"expressions/column_selections/#using-selectors","title":"Using selectors","text":"<p><code>selectors</code> is a unique feature of <code>Polars</code>. It behaves similarly to a combination of <code>df.select_dtypes()</code> and <code>df.filter()</code> in <code>Pandas</code>. </p>"},{"location":"expressions/column_selections/#by-dtype","title":"By dtype","text":"PolarsPandas <pre><code>out_pl = df_pl.select(cs.integer(), cs.string())\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 rn  \u2506 id  \u2506 place  \u2502\n\u2502 --- \u2506 --- \u2506 ---    \u2502\n\u2502 u32 \u2506 i64 \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 9   \u2506 Mars   \u2502\n\u2502 1   \u2506 4   \u2506 Earth  \u2502\n\u2502 2   \u2506 2   \u2506 Saturn \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = df_pd.select_dtypes(['int64', 'object'])\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>rn        int64\nid        int64\nplace    object\ndtype: object\n\n   rn  id   place\n0   0   9    Mars\n1   1   4   Earth\n2   2   2  Saturn\n</code></pre> </p>"},{"location":"expressions/column_selections/#applying-set-operations","title":"Applying set operations","text":"PolarsPandas <pre><code>out_pl = df_pl.select(cs.numeric() - cs.first())\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 sales     \u2502\n\u2502 --- \u2506 ---       \u2502\n\u2502 i64 \u2506 f64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 9   \u2506 33.4      \u2502\n\u2502 4   \u2506 2142134.1 \u2502\n\u2502 2   \u2506 44.7      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = df_pd.select_dtypes(np.number).iloc[:, 1:]\nprint(out_pd.dtypes, end='\\n'*2)\nprint(out_pd)\n</code></pre> <p><pre><code>id         int64\nsales    float64\ndtype: object\n\n   id      sales\n0   9       33.4\n1   4  2142134.1\n2   2       44.7\n</code></pre> </p>"},{"location":"expressions/column_selections/#by-patterns-and-substrings","title":"By patterns and substrings","text":"PolarsPandas <pre><code>out_pl = df_pl.select(cs.contains(\"rn\"), cs.matches(\".*_.*\"))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 rn  \u2506 has_people \u2506 logged_at           \u2502\n\u2502 --- \u2506 ---        \u2506 ---                 \u2502\n\u2502 u32 \u2506 bool       \u2506 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0   \u2506 false      \u2506 2022-12-01 00:00:00 \u2502\n\u2502 1   \u2506 true       \u2506 2022-12-01 00:00:01 \u2502\n\u2502 2   \u2506 false      \u2506 2022-12-01 00:00:02 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = df_pd[df_pd\n               .filter(like=\"rn\")\n               .columns.append(df_pd\n                               .filter(regex=\".*_.*\")\n                               .columns)\n               ]\nprint(out_pd)\n</code></pre> <p><pre><code>   rn  has_people           logged_at\n0   0       False 2022-12-01 00:00:00\n1   1        True 2022-12-01 00:00:01\n2   2       False 2022-12-01 00:00:02\n</code></pre> </p>"},{"location":"expressions/column_selections/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/folds/","title":"Folds","text":"<p>under construction...</p>"},{"location":"expressions/functions/","title":"Functions","text":""},{"location":"expressions/functions/#setup","title":"Setup","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport polars as pl\n\nnp.random.seed(42)\ndata = {\n    \"nrs\": [1, 2, 3, 4, 5],\n    \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"baz\"],\n    \"random\": np.random.rand(5),\n    \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"],\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 --- \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64 \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 foo   \u2506 0.37454  \u2506 A      \u2502\n\u2502 2   \u2506 ham   \u2506 0.950714 \u2506 A      \u2502\n\u2502 3   \u2506 spam  \u2506 0.731994 \u2506 B      \u2502\n\u2502 4   \u2506 egg   \u2506 0.598658 \u2506 C      \u2502\n\u2502 5   \u2506 baz   \u2506 0.156019 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>   nrs names    random groups\n0    1   foo  0.374540      A\n1    2   ham  0.950714      A\n2    3  spam  0.731994      B\n3    4   egg  0.598658      C\n4    5   baz  0.156019      B\n</code></pre> </p>"},{"location":"expressions/functions/#column-naming","title":"Column naming","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select((pl.col(\"nrs\") + 5).alias(\"nrs + 5\"),\n                  (pl.col(\"nrs\") - 5).alias(\"nrs - 5\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs + 5 \u2506 nrs - 5 \u2502\n\u2502 ---     \u2506 ---     \u2502\n\u2502 i64     \u2506 i64     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6       \u2506 -4      \u2502\n\u2502 7       \u2506 -3      \u2502\n\u2502 8       \u2506 -2      \u2502\n\u2502 9       \u2506 -1      \u2502\n\u2502 10      \u2506 0       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(**{\"nrs + 5\": lambda df_: df_.nrs + 5,\n                     \"nrs - 5\": lambda df_: df_.nrs - 5})\n          .drop(columns=df_pd.columns)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs + 5  nrs - 5\n0        6       -4\n1        7       -3\n2        8       -2\n3        9       -1\n4       10        0\n</code></pre> </p>"},{"location":"expressions/functions/#count-unique-values","title":"Count unique values","text":"<p>In <code>Pandas</code>, it appears that there is no built-in method for approximating the count of unique values.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .select(pl.col(\"names\").n_unique().alias(\"unique\"),\n                  pl.approx_n_unique(\"names\").alias(\"unique_approx\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 unique \u2506 unique_approx \u2502\n\u2502 ---    \u2506 ---           \u2502\n\u2502 u32    \u2506 u32           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 5      \u2506 5             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .names\n          .to_frame()\n          .agg(unique=(\"names\", lambda s: s.unique().size))\n          .T\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>       unique\nnames       5\n</code></pre> </p>"},{"location":"expressions/functions/#conditionals","title":"Conditionals","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select(pl.col(\"nrs\"),\n                  pl.when(pl.col(\"nrs\") &gt; 2)\n                  .then(pl.lit(True))\n                  .otherwise(pl.lit(False))\n                  .alias(\"conditional\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 conditional \u2502\n\u2502 --- \u2506 ---         \u2502\n\u2502 i64 \u2506 bool        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 false       \u2502\n\u2502 2   \u2506 false       \u2502\n\u2502 3   \u2506 true        \u2502\n\u2502 4   \u2506 true        \u2502\n\u2502 5   \u2506 true        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(conditional=lambda df_: np.where(df_.nrs &gt; 2, True, False))\n          .drop(columns=df_pd.columns.drop(\"nrs\"))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs  conditional\n0    1        False\n1    2        False\n2    3         True\n3    4         True\n4    5         True\n</code></pre> </p>"},{"location":"expressions/functions/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/lists/","title":"List","text":""},{"location":"expressions/lists/#powerful-list-manipulation","title":"Powerful List manipulation","text":""},{"location":"expressions/lists/#setup","title":"Setup","text":"<pre><code>import pandas as pd\nimport polars as pl\n\ndata = {\n    \"station\": [\"Station \" + str(x) for x in range(1, 6)],\n    \"temperatures\": [\"20 5 5 E1 7 13 19 9 6 20\",\n                     \"18 8 16 11 23 E2 8 E2 E2 E2 90 70 40\",\n                     \"19 24 E9 16 6 12 10 22\",\n                     \"E2 E0 15 7 8 10 E1 24 17 13 6\",\n                     \"14 8 E0 16 22 24 E1\"]\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures                      \u2502\n\u2502 ---       \u2506 ---                               \u2502\n\u2502 str       \u2506 str                               \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 20 5 5 E1 7 13 19 9 6 20          \u2502\n\u2502 Station 2 \u2506 18 8 16 11 23 E2 8 E2 E2 E2 90 7\u2026 \u2502\n\u2502 Station 3 \u2506 19 24 E9 16 6 12 10 22            \u2502\n\u2502 Station 4 \u2506 E2 E0 15 7 8 10 E1 24 17 13 6     \u2502\n\u2502 Station 5 \u2506 14 8 E0 16 22 24 E1               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>     station                          temperatures\n0  Station 1              20 5 5 E1 7 13 19 9 6 20\n1  Station 2  18 8 16 11 23 E2 8 E2 E2 E2 90 70 40\n2  Station 3                19 24 E9 16 6 12 10 22\n3  Station 4         E2 E0 15 7 8 10 E1 24 17 13 6\n4  Station 5                   14 8 E0 16 22 24 E1\n</code></pre> </p>"},{"location":"expressions/lists/#creating-a-list-column","title":"Creating a List column","text":"PolarsPandas <pre><code>out_pl = df_pl.with_columns(pl.col(\"temperatures\").str.split(\" \"))\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures         \u2502\n\u2502 ---       \u2506 ---                  \u2502\n\u2502 str       \u2506 list[str]            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 [\"20\", \"5\", \u2026 \"20\"]  \u2502\n\u2502 Station 2 \u2506 [\"18\", \"8\", \u2026 \"40\"]  \u2502\n\u2502 Station 3 \u2506 [\"19\", \"24\", \u2026 \"22\"] \u2502\n\u2502 Station 4 \u2506 [\"E2\", \"E0\", \u2026 \"6\"]  \u2502\n\u2502 Station 5 \u2506 [\"14\", \"8\", \u2026 \"E1\"]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(temperatures=lambda df_: df_.temperatures.str.split())\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>     station                                       temperatures\n0  Station 1                [20, 5, 5, E1, 7, 13, 19, 9, 6, 20]\n1  Station 2  [18, 8, 16, 11, 23, E2, 8, E2, E2, E2, 90, 70,...\n2  Station 3                    [19, 24, E9, 16, 6, 12, 10, 22]\n3  Station 4          [E2, E0, 15, 7, 8, 10, E1, 24, 17, 13, 6]\n4  Station 5                        [14, 8, E0, 16, 22, 24, E1]\n</code></pre> </p>"},{"location":"expressions/lists/#operating-on-list-columns","title":"Operating on List columns","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .with_columns(pl.col(\"temperatures\").str.split(\" \"))\n          .with_columns(pl.col(\"temperatures\").list.head(3).alias(\"top3\"),\n                        pl.col(\"temperatures\").list.slice(-3,\n                                                          3).alias(\"bottom_3\"),\n                        pl.col(\"temperatures\").list.len().alias(\"obs\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures         \u2506 top3               \u2506 bottom_3           \u2506 obs \u2502\n\u2502 ---       \u2506 ---                  \u2506 ---                \u2506 ---                \u2506 --- \u2502\n\u2502 str       \u2506 list[str]            \u2506 list[str]          \u2506 list[str]          \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 [\"20\", \"5\", \u2026 \"20\"]  \u2506 [\"20\", \"5\", \"5\"]   \u2506 [\"9\", \"6\", \"20\"]   \u2506 10  \u2502\n\u2502 Station 2 \u2506 [\"18\", \"8\", \u2026 \"40\"]  \u2506 [\"18\", \"8\", \"16\"]  \u2506 [\"90\", \"70\", \"40\"] \u2506 13  \u2502\n\u2502 Station 3 \u2506 [\"19\", \"24\", \u2026 \"22\"] \u2506 [\"19\", \"24\", \"E9\"] \u2506 [\"12\", \"10\", \"22\"] \u2506 8   \u2502\n\u2502 Station 4 \u2506 [\"E2\", \"E0\", \u2026 \"6\"]  \u2506 [\"E2\", \"E0\", \"15\"] \u2506 [\"17\", \"13\", \"6\"]  \u2506 11  \u2502\n\u2502 Station 5 \u2506 [\"14\", \"8\", \u2026 \"E1\"]  \u2506 [\"14\", \"8\", \"E0\"]  \u2506 [\"22\", \"24\", \"E1\"] \u2506 7   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>from operator import itemgetter  # noqa: E402\n\nout_pd = (df_pd\n          .assign(\n              temperatures=lambda df_: df_.temperatures.str.split(),\n              top3=lambda df_: df_.temperatures.apply(\n                  itemgetter(slice(None, 3))),\n              bottom_3=lambda df_: df_.temperatures.apply(\n                  itemgetter(slice(-3, None))),\n              obs=lambda df_: df_.temperatures.apply(len))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>     station                                       temperatures          top3      bottom_3  obs\n0  Station 1                [20, 5, 5, E1, 7, 13, 19, 9, 6, 20]    [20, 5, 5]    [9, 6, 20]   10\n1  Station 2  [18, 8, 16, 11, 23, E2, 8, E2, E2, E2, 90, 70,...   [18, 8, 16]  [90, 70, 40]   13\n2  Station 3                    [19, 24, E9, 16, 6, 12, 10, 22]  [19, 24, E9]  [12, 10, 22]    8\n3  Station 4          [E2, E0, 15, 7, 8, 10, E1, 24, 17, 13, 6]  [E2, E0, 15]   [17, 13, 6]   11\n4  Station 5                        [14, 8, E0, 16, 22, 24, E1]   [14, 8, E0]  [22, 24, E1]    7\n</code></pre> </p>"},{"location":"expressions/lists/#element-wise-computation-within-lists","title":"Element-wise computation within Lists","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .with_columns(\n              pl.col(\"temperatures\")\n              .str.split(\" \")\n              .list.eval(pl.element().cast(pl.Int64, strict=False).is_null())\n              .list.sum()\n              .alias(\"errors\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station   \u2506 temperatures                      \u2506 errors \u2502\n\u2502 ---       \u2506 ---                               \u2506 ---    \u2502\n\u2502 str       \u2506 str                               \u2506 u32    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1 \u2506 20 5 5 E1 7 13 19 9 6 20          \u2506 1      \u2502\n\u2502 Station 2 \u2506 18 8 16 11 23 E2 8 E2 E2 E2 90 7\u2026 \u2506 4      \u2502\n\u2502 Station 3 \u2506 19 24 E9 16 6 12 10 22            \u2506 1      \u2502\n\u2502 Station 4 \u2506 E2 E0 15 7 8 10 E1 24 17 13 6     \u2506 3      \u2502\n\u2502 Station 5 \u2506 14 8 E0 16 22 24 E1               \u2506 2      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>def eval_sum(v):\n    return pd.to_numeric(pd.Series(v), errors=\"coerce\").isna().sum()\n\n\nout_pd = (df_pd\n          .assign(\n              errors=lambda df_: df_.temperatures.str.split().apply(eval_sum))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>     station                          temperatures  errors\n0  Station 1              20 5 5 E1 7 13 19 9 6 20       1\n1  Station 2  18 8 16 11 23 E2 8 E2 E2 E2 90 70 40       4\n2  Station 3                19 24 E9 16 6 12 10 22       1\n3  Station 4         E2 E0 15 7 8 10 E1 24 17 13 6       3\n4  Station 5                   14 8 E0 16 22 24 E1       2\n</code></pre> </p>"},{"location":"expressions/lists/#row-wise-computations","title":"Row-wise computations","text":"<pre><code>data2 = {\n    \"station\": [\"Station \" + str(x) for x in range(1, 11)],\n    \"day_1\": [17, 11, 8, 22, 9, 21, 20, 8, 8, 17],\n    \"day_2\": [15, 11, 10, 8, 7, 14, 18, 21, 15, 13],\n    \"day_3\": [16, 15, 24, 24, 8, 23, 19, 23, 16, 10]\n}\n</code></pre> Polars_dfPandas_dfPolarsPandas <pre><code>df_pl = pl.DataFrame(data2)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (10, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station    \u2506 day_1 \u2506 day_2 \u2506 day_3 \u2502\n\u2502 ---        \u2506 ---   \u2506 ---   \u2506 ---   \u2502\n\u2502 str        \u2506 i64   \u2506 i64   \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1  \u2506 17    \u2506 15    \u2506 16    \u2502\n\u2502 Station 2  \u2506 11    \u2506 11    \u2506 15    \u2502\n\u2502 Station 3  \u2506 8     \u2506 10    \u2506 24    \u2502\n\u2502 Station 4  \u2506 22    \u2506 8     \u2506 24    \u2502\n\u2502 \u2026          \u2506 \u2026     \u2506 \u2026     \u2506 \u2026     \u2502\n\u2502 Station 7  \u2506 20    \u2506 18    \u2506 19    \u2502\n\u2502 Station 8  \u2506 8     \u2506 21    \u2506 23    \u2502\n\u2502 Station 9  \u2506 8     \u2506 15    \u2506 16    \u2502\n\u2502 Station 10 \u2506 17    \u2506 13    \u2506 10    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data2)\nprint(df_pd)\n</code></pre> <p><pre><code>      station  day_1  day_2  day_3\n0   Station 1     17     15     16\n1   Station 2     11     11     15\n2   Station 3      8     10     24\n3   Station 4     22      8     24\n4   Station 5      9      7      8\n5   Station 6     21     14     23\n6   Station 7     20     18     19\n7   Station 8      8     21     23\n8   Station 9      8     15     16\n9  Station 10     17     13     10\n</code></pre> </p> <pre><code>rank_pct = (pl.element().rank(descending=True) / pl.col(\"*\").count()).round(2)\n\n\nout_pl = (df_pl\n          .with_columns(pl.concat_list(pl.all().exclude(\"station\")).alias(\"all_temps\"))\n          .select(pl.all().exclude(\"all_temps\"),\n                  pl.col(\"all_temps\").list.eval(rank_pct, parallel=True).alias(\"temps_rank\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (10, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 station    \u2506 day_1 \u2506 day_2 \u2506 day_3 \u2506 temps_rank         \u2502\n\u2502 ---        \u2506 ---   \u2506 ---   \u2506 ---   \u2506 ---                \u2502\n\u2502 str        \u2506 i64   \u2506 i64   \u2506 i64   \u2506 list[f64]          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Station 1  \u2506 17    \u2506 15    \u2506 16    \u2506 [0.33, 1.0, 0.67]  \u2502\n\u2502 Station 2  \u2506 11    \u2506 11    \u2506 15    \u2506 [0.83, 0.83, 0.33] \u2502\n\u2502 Station 3  \u2506 8     \u2506 10    \u2506 24    \u2506 [1.0, 0.67, 0.33]  \u2502\n\u2502 Station 4  \u2506 22    \u2506 8     \u2506 24    \u2506 [0.67, 1.0, 0.33]  \u2502\n\u2502 \u2026          \u2506 \u2026     \u2506 \u2026     \u2506 \u2026     \u2506 \u2026                  \u2502\n\u2502 Station 7  \u2506 20    \u2506 18    \u2506 19    \u2506 [0.33, 1.0, 0.67]  \u2502\n\u2502 Station 8  \u2506 8     \u2506 21    \u2506 23    \u2506 [1.0, 0.67, 0.33]  \u2502\n\u2502 Station 9  \u2506 8     \u2506 15    \u2506 16    \u2506 [1.0, 0.67, 0.33]  \u2502\n\u2502 Station 10 \u2506 17    \u2506 13    \u2506 10    \u2506 [0.33, 0.67, 1.0]  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>def cal_rank_pct(df_):\n    n_days = df_.columns.drop([\"station\"]).size\n    return (df_\n            .drop(columns=[\"station\"])\n            .rank(axis=\"columns\", ascending=False)\n            .div(n_days)\n            .round(2)\n            .agg(list, axis=\"columns\")\n            )\n\n\nout_pd = df_pd.assign(temps_rank=cal_rank_pct)\nprint(out_pd)\n</code></pre> <p><pre><code>      station  day_1  day_2  day_3          temps_rank\n0   Station 1     17     15     16   [0.33, 1.0, 0.67]\n1   Station 2     11     11     15  [0.83, 0.83, 0.33]\n2   Station 3      8     10     24   [1.0, 0.67, 0.33]\n3   Station 4     22      8     24   [0.67, 1.0, 0.33]\n4   Station 5      9      7      8   [0.33, 1.0, 0.67]\n5   Station 6     21     14     23   [0.67, 1.0, 0.33]\n6   Station 7     20     18     19   [0.33, 1.0, 0.67]\n7   Station 8      8     21     23   [1.0, 0.67, 0.33]\n8   Station 9      8     15     16   [1.0, 0.67, 0.33]\n9  Station 10     17     13     10   [0.33, 0.67, 1.0]\n</code></pre> </p>"},{"location":"expressions/lists/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/operators/","title":"Basic operators","text":""},{"location":"expressions/operators/#setup","title":"Setup","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport polars as pl\n\nnp.random.seed(42)\ndata = {\n    \"nrs\": [1, 2, 3, 4, 5],\n    \"names\": [\"foo\", \"ham\", \"spam\", \"egg\", \"baz\"],\n    \"random\": np.random.rand(5),\n    \"groups\": [\"A\", \"A\", \"B\", \"C\", \"B\"],\n}\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.DataFrame(data)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs \u2506 names \u2506 random   \u2506 groups \u2502\n\u2502 --- \u2506 ---   \u2506 ---      \u2506 ---    \u2502\n\u2502 i64 \u2506 str   \u2506 f64      \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 foo   \u2506 0.37454  \u2506 A      \u2502\n\u2502 2   \u2506 ham   \u2506 0.950714 \u2506 A      \u2502\n\u2502 3   \u2506 spam  \u2506 0.731994 \u2506 B      \u2502\n\u2502 4   \u2506 egg   \u2506 0.598658 \u2506 C      \u2502\n\u2502 5   \u2506 baz   \u2506 0.156019 \u2506 B      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data)\nprint(df_pd)\n</code></pre> <p><pre><code>   nrs names    random groups\n0    1   foo  0.374540      A\n1    2   ham  0.950714      A\n2    3  spam  0.731994      B\n3    4   egg  0.598658      C\n4    5   baz  0.156019      B\n</code></pre> </p>"},{"location":"expressions/operators/#numerical","title":"Numerical","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select((pl.col(\"nrs\") + 5).alias(\"nrs + 5\"),\n                  (pl.col(\"nrs\") - 5).alias(\"nrs - 5\"),\n                  (pl.col(\"nrs\") * pl.col(\"random\")).alias(\"nrs * random\"),\n                  (pl.col(\"nrs\") / pl.col(\"random\")).alias(\"nrs / random\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs + 5 \u2506 nrs - 5 \u2506 nrs * random \u2506 nrs / random \u2502\n\u2502 ---     \u2506 ---     \u2506 ---          \u2506 ---          \u2502\n\u2502 i64     \u2506 i64     \u2506 f64          \u2506 f64          \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6       \u2506 -4      \u2506 0.37454      \u2506 2.669941     \u2502\n\u2502 7       \u2506 -3      \u2506 1.901429     \u2506 2.103681     \u2502\n\u2502 8       \u2506 -2      \u2506 2.195982     \u2506 4.098395     \u2502\n\u2502 9       \u2506 -1      \u2506 2.394634     \u2506 6.681606     \u2502\n\u2502 10      \u2506 0       \u2506 0.780093     \u2506 32.047453    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(**{\"nrs + 5\": lambda df_: df_.nrs + 5,\n                     \"nrs - 5\": lambda df_: df_.nrs - 5,\n                     \"nrs * random\": lambda df_: df_.nrs * df_.random,\n                     \"nrs / random\": lambda df_: df_.nrs / df_.random})\n          .drop(columns=df_pd.columns)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs + 5  nrs - 5  nrs * random  nrs / random\n0        6       -4      0.374540      2.669941\n1        7       -3      1.901429      2.103681\n2        8       -2      2.195982      4.098395\n3        9       -1      2.394634      6.681606\n4       10        0      0.780093     32.047453\n</code></pre> </p>"},{"location":"expressions/operators/#logical","title":"Logical","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .select(\n              (pl.col(\"nrs\") &gt; 1).alias(\"nrs &gt; 1\"),\n              (pl.col(\"random\") &lt;= 0.5).alias(\"random &lt;= .5\"),\n              (pl.col(\"nrs\") != 1).alias(\"nrs != 1\"),\n              (pl.col(\"nrs\") == 1).alias(\"nrs == 1\"),\n              ((pl.col(\"random\") &lt;= 0.5) &amp;\n               (pl.col(\"nrs\") &gt; 1)).alias(\"and_expr\"),\n              ((pl.col(\"random\") &lt;= 0.5) | (pl.col(\"nrs\") &gt; 1)).alias(\"or_expr\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (5, 6)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 nrs &gt; 1 \u2506 random &lt;= .5 \u2506 nrs != 1 \u2506 nrs == 1 \u2506 and_expr \u2506 or_expr \u2502\n\u2502 ---     \u2506 ---          \u2506 ---      \u2506 ---      \u2506 ---      \u2506 ---     \u2502\n\u2502 bool    \u2506 bool         \u2506 bool     \u2506 bool     \u2506 bool     \u2506 bool    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 false   \u2506 true         \u2506 false    \u2506 true     \u2506 false    \u2506 true    \u2502\n\u2502 true    \u2506 false        \u2506 true     \u2506 false    \u2506 false    \u2506 true    \u2502\n\u2502 true    \u2506 false        \u2506 true     \u2506 false    \u2506 false    \u2506 true    \u2502\n\u2502 true    \u2506 false        \u2506 true     \u2506 false    \u2506 false    \u2506 true    \u2502\n\u2502 true    \u2506 true         \u2506 true     \u2506 false    \u2506 true     \u2506 true    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(**{\"nrs &gt; 1\": lambda df_: df_.nrs &gt; 1,\n                     \"random &lt;= .5\": lambda df_: df_.random &lt;= .5,\n                     \"nrs != 1\": lambda df_: df_.nrs != 1,\n                     \"nrs == 1\": lambda df_: df_.nrs == 1,\n                     \"and_expr\": lambda df_: (df_.random &lt;= .5) &amp; (df_.nrs &gt; 1),\n                     \"or_expr\": lambda df_: (df_.random &lt;= .5) | (df_.nrs &gt; 1)})\n          .drop(columns=df_pd.columns)\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   nrs &gt; 1  random &lt;= .5  nrs != 1  nrs == 1  and_expr  or_expr\n0    False          True     False      True     False     True\n1     True         False      True     False     False     True\n2     True         False      True     False     False     True\n3     True         False      True     False     False     True\n4     True          True      True     False      True     True\n</code></pre> </p>"},{"location":"expressions/operators/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/strings/","title":"Strings","text":""},{"location":"expressions/strings/#setup","title":"Setup","text":"<pre><code>import pandas as pd\nimport polars as pl\n</code></pre>"},{"location":"expressions/strings/#check-for-existence-of-a-pattern","title":"Check for existence of a pattern","text":"<pre><code>data1 = {\"animal\": [\"Crab\", \"cat and dog\", \"rab$bit\", None]}\n</code></pre> Polars_dfPandas_dfPolarsPandas <pre><code>df_pl = pl.DataFrame(data1)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (4, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 animal      \u2502\n\u2502 ---         \u2502\n\u2502 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Crab        \u2502\n\u2502 cat and dog \u2502\n\u2502 rab$bit     \u2502\n\u2502 null        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data1)\nprint(df_pd)\n</code></pre> <p><pre><code>        animal\n0         Crab\n1  cat and dog\n2      rab$bit\n3         None\n</code></pre> </p> <pre><code>out_pl = (df_pl\n          .select(pl.col(\"animal\"),\n                  pl.col(\"animal\").str.contains(\"cat|bit\").alias(\"regex\"),\n                  pl.col(\"animal\").str.contains(\n                  \"rab$\", literal=True).alias(\"literal\"),\n                  pl.col(\"animal\").str.starts_with(\"rab\").alias(\"starts_with\"),\n                  pl.col(\"animal\").str.ends_with(\"dog\").alias(\"ends_with\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (4, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 animal      \u2506 regex \u2506 literal \u2506 starts_with \u2506 ends_with \u2502\n\u2502 ---         \u2506 ---   \u2506 ---     \u2506 ---         \u2506 ---       \u2502\n\u2502 str         \u2506 bool  \u2506 bool    \u2506 bool        \u2506 bool      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Crab        \u2506 false \u2506 false   \u2506 false       \u2506 false     \u2502\n\u2502 cat and dog \u2506 true  \u2506 false   \u2506 false       \u2506 true      \u2502\n\u2502 rab$bit     \u2506 true  \u2506 true    \u2506 true        \u2506 false     \u2502\n\u2502 null        \u2506 null  \u2506 null    \u2506 null        \u2506 null      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(animal=lambda df_: df_.animal,\n                  regex=lambda df_: df_.animal.str.contains(\"cat|bit\"),\n                  literal=lambda df_: df_.animal.str.contains(\n                      \"rab$\", regex=False),\n                  starts_with=lambda df_: df_.animal.str.startswith(\"rab\"),\n                  ends_with=lambda df_: df_.animal.str.endswith(\"dog\"))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>        animal  regex literal starts_with ends_with\n0         Crab  False   False       False     False\n1  cat and dog   True   False       False      True\n2      rab$bit   True    True        True     False\n3         None   None    None        None      None\n</code></pre> </p> <p>There's a slight difference in syntax between <code>Polars</code> and <code>Pandas</code> when it comes to methods for checking whether the start and end of each string element matches a given pattern.</p> <ul> <li>In <code>Polars</code>, you use <code>pl.col(..).str.starts_with(..)</code> and <code>pl.col(..).str.ends_with(..)</code>.</li> <li>In <code>Pandas</code>, the equivalent methods are <code>pd.Series.str.startswith(..)</code> and <code>pd.Series.str.endswith(..)</code>.</li> </ul>"},{"location":"expressions/strings/#extract-a-pattern","title":"Extract a pattern","text":"<pre><code>data2 = {\"a\": [\"http://vote.com/ballon_dor?candidate=messi&amp;ref=polars\",\n               \"http://vote.com/ballon_dor?candidat=jorginho&amp;ref=polars\",\n               \"http://vote.com/ballon_dor?candidate=ronaldo&amp;ref=polars\"]}\n</code></pre> Polars_dfPandas_dfPolarsPandas <pre><code>df_pl = pl.DataFrame(data2)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a                                 \u2502\n\u2502 ---                               \u2502\n\u2502 str                               \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 http://vote.com/ballon_dor?candi\u2026 \u2502\n\u2502 http://vote.com/ballon_dor?candi\u2026 \u2502\n\u2502 http://vote.com/ballon_dor?candi\u2026 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data2)\nprint(df_pd)\n</code></pre> <p><pre><code>                                                   a\n0  http://vote.com/ballon_dor?candidate=messi&amp;ref...\n1  http://vote.com/ballon_dor?candidat=jorginho&amp;r...\n2  http://vote.com/ballon_dor?candidate=ronaldo&amp;r...\n</code></pre> </p> <pre><code>out_pl = (df_pl\n          .select(pl.col(\"a\").str.extract(r\"candidate=(\\w+)\", group_index=1))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a       \u2502\n\u2502 ---     \u2502\n\u2502 str     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 messi   \u2502\n\u2502 null    \u2502\n\u2502 ronaldo \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(a=lambda df_: df_.a.str.extract(r\"candidate=(\\w+)\"))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>         a\n0    messi\n1      NaN\n2  ronaldo\n</code></pre> </p>"},{"location":"expressions/strings/#extract-all-occurrences-of-a-pattern","title":"Extract all occurrences of a pattern","text":"<pre><code>data3 = {\"foo\": [\"123 bla 45 asd\", \"xyz 678 910t\"]}\n</code></pre> Polars_dfPandas_dfPolarsPandas <pre><code>df_pl = pl.DataFrame(data3)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo            \u2502\n\u2502 ---            \u2502\n\u2502 str            \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 123 bla 45 asd \u2502\n\u2502 xyz 678 910t   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data3)\nprint(df_pd)\n</code></pre> <p><pre><code>              foo\n0  123 bla 45 asd\n1    xyz 678 910t\n</code></pre> </p> <pre><code>out_pl = (df_pl\n          .select(pl.col(\"foo\").str.extract_all(r\"(\\d+)\").alias(\"extracted_nrs\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 extracted_nrs  \u2502\n\u2502 ---            \u2502\n\u2502 list[str]      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 [\"123\", \"45\"]  \u2502\n\u2502 [\"678\", \"910\"] \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .foo\n          .str.extractall(r\"(\\d+)\")\n          .droplevel('match', axis=\"rows\")\n          .reset_index()\n          .groupby(\"index\")\n          .agg(list)\n          .rename(columns={0: \"extracted_nrs\"})\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>      extracted_nrs\nindex              \n0         [123, 45]\n1        [678, 910]\n</code></pre> </p>"},{"location":"expressions/strings/#replace-a-pattern","title":"Replace a pattern","text":"<pre><code>data4 = {\"id\": [1, 2], \"text\": [\"123abc\", \"abc456\"]}\n</code></pre> Polars_dfPandas_dfPolarsPandas <pre><code>df_pl = pl.DataFrame(data4)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 text   \u2502\n\u2502 --- \u2506 ---    \u2502\n\u2502 i64 \u2506 str    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 123abc \u2502\n\u2502 2   \u2506 abc456 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.DataFrame(data4)\nprint(df_pd)\n</code></pre> <p><pre><code>   id    text\n0   1  123abc\n1   2  abc456\n</code></pre> </p> <pre><code>out_pl = (df_pl\n          .with_columns(pl.col(\"text\").str.replace(r\"abc\\b\", \"ABC\"),\n                        pl.col(\"text\").str.replace_all(\n                            \"a\", \"-\", literal=True).alias(\"text_replace_all\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 id  \u2506 text   \u2506 text_replace_all \u2502\n\u2502 --- \u2506 ---    \u2506 ---              \u2502\n\u2502 i64 \u2506 str    \u2506 str              \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 123ABC \u2506 123-bc           \u2502\n\u2502 2   \u2506 abc456 \u2506 -bc456           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .assign(text=lambda df_: df_.text.str.replace(r\"abc\\b\", \"ABC\", n=1, regex=True),\n                  text_replace_all=lambda _: df_pd.text.str.replace(\"a\", \"-\"))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>   id    text text_replace_all\n0   1  123ABC           123-bc\n1   2  abc456           -bc456\n</code></pre> </p>"},{"location":"expressions/strings/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"expressions/structs/","title":"Structs","text":"<p>under construction...</p>"},{"location":"expressions/window_functions/","title":"Window functions","text":""},{"location":"expressions/window_functions/#setup","title":"Setup","text":"<pre><code>import pandas as pd\nimport polars as pl\n\nurl = \"https://gist.githubusercontent.com/ritchie46/cac6b337ea52281aa23c049250a4ff03/raw/89a957ff3919d90e6ef2d34235e6bf22304f3366/pokemon.csv\"\n</code></pre> Polars_dfPandas_df <pre><code>df_pl = pl.read_csv(url)\nprint(df_pl)\n</code></pre> <p><pre><code>shape: (163, 13)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 #   \u2506 Name                  \u2506 Type 1  \u2506 Type 2 \u2506 \u2026 \u2506 Sp. Def \u2506 Speed \u2506 Generation \u2506 Legendary \u2502\n\u2502 --- \u2506 ---                   \u2506 ---     \u2506 ---    \u2506   \u2506 ---     \u2506 ---   \u2506 ---        \u2506 ---       \u2502\n\u2502 i64 \u2506 str                   \u2506 str     \u2506 str    \u2506   \u2506 i64     \u2506 i64   \u2506 i64        \u2506 bool      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 Bulbasaur             \u2506 Grass   \u2506 Poison \u2506 \u2026 \u2506 65      \u2506 45    \u2506 1          \u2506 false     \u2502\n\u2502 2   \u2506 Ivysaur               \u2506 Grass   \u2506 Poison \u2506 \u2026 \u2506 80      \u2506 60    \u2506 1          \u2506 false     \u2502\n\u2502 3   \u2506 Venusaur              \u2506 Grass   \u2506 Poison \u2506 \u2026 \u2506 100     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 3   \u2506 VenusaurMega Venusaur \u2506 Grass   \u2506 Poison \u2506 \u2026 \u2506 120     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 \u2026   \u2506 \u2026                     \u2506 \u2026       \u2506 \u2026      \u2506 \u2026 \u2506 \u2026       \u2506 \u2026     \u2506 \u2026          \u2506 \u2026         \u2502\n\u2502 147 \u2506 Dratini               \u2506 Dragon  \u2506 null   \u2506 \u2026 \u2506 50      \u2506 50    \u2506 1          \u2506 false     \u2502\n\u2502 148 \u2506 Dragonair             \u2506 Dragon  \u2506 null   \u2506 \u2026 \u2506 70      \u2506 70    \u2506 1          \u2506 false     \u2502\n\u2502 149 \u2506 Dragonite             \u2506 Dragon  \u2506 Flying \u2506 \u2026 \u2506 100     \u2506 80    \u2506 1          \u2506 false     \u2502\n\u2502 150 \u2506 Mewtwo                \u2506 Psychic \u2506 null   \u2506 \u2026 \u2506 90      \u2506 130   \u2506 1          \u2506 true      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>df_pd = pd.read_csv(url)\nprint(df_pd)\n</code></pre> <p><pre><code>       #                   Name   Type 1  Type 2  Total   HP  ...  Defense  Sp. Atk  Sp. Def  Speed  Generation  Legendary\n0      1              Bulbasaur    Grass  Poison    318   45  ...       49       65       65     45           1      False\n1      2                Ivysaur    Grass  Poison    405   60  ...       63       80       80     60           1      False\n2      3               Venusaur    Grass  Poison    525   80  ...       83      100      100     80           1      False\n3      3  VenusaurMega Venusaur    Grass  Poison    625   80  ...      123      122      120     80           1      False\n4      4             Charmander     Fire     NaN    309   39  ...       43       60       50     65           1      False\n..   ...                    ...      ...     ...    ...  ...  ...      ...      ...      ...    ...         ...        ...\n158  146                Moltres     Fire  Flying    580   90  ...       90      125       85     90           1       True\n159  147                Dratini   Dragon     NaN    300   41  ...       45       50       50     50           1      False\n160  148              Dragonair   Dragon     NaN    420   61  ...       65       70       70     70           1      False\n161  149              Dragonite   Dragon  Flying    600   91  ...       95      100      100     80           1      False\n162  150                 Mewtwo  Psychic     NaN    680  106  ...       90      154       90    130           1       True\n\n[163 rows x 13 columns]\n</code></pre> </p>"},{"location":"expressions/window_functions/#group-by-aggregations-in-selection","title":"Group by aggregations in selection","text":"<p>To ensure comparable results between <code>Polars</code> and <code>Pandas</code> in <code>Type 2</code>, it's necessary to handle <code>NaN</code> values. We can achieve this by filling the <code>NaN</code> values with a specified <code>placeholder</code> in <code>Pandas</code>.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .select(\n              \"Type 1\",\n              \"Type 2\",\n              pl.col(\"Attack\").mean().over(\n                  \"Type 1\").alias(\"avg_attack_by_type\"),\n              pl.col(\"Defense\").mean().over([\"Type 1\", \"Type 2\"]).alias(\n                  \"avg_defense_by_type_combination\"),\n              pl.col(\"Attack\").mean().alias(\"avg_attack\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (163, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Type 1  \u2506 Type 2 \u2506 avg_attack_by_type \u2506 avg_defense_by_type_combination \u2506 avg_attack \u2502\n\u2502 ---     \u2506 ---    \u2506 ---                \u2506 ---                             \u2506 ---        \u2502\n\u2502 str     \u2506 str    \u2506 f64                \u2506 f64                             \u2506 f64        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 Grass   \u2506 Poison \u2506 72.923077          \u2506 67.8                            \u2506 75.349693  \u2502\n\u2502 \u2026       \u2506 \u2026      \u2506 \u2026                  \u2506 \u2026                               \u2506 \u2026          \u2502\n\u2502 Dragon  \u2506 null   \u2506 94.0               \u2506 55.0                            \u2506 75.349693  \u2502\n\u2502 Dragon  \u2506 null   \u2506 94.0               \u2506 55.0                            \u2506 75.349693  \u2502\n\u2502 Dragon  \u2506 Flying \u2506 94.0               \u2506 95.0                            \u2506 75.349693  \u2502\n\u2502 Psychic \u2506 null   \u2506 53.875             \u2506 51.428571                       \u2506 75.349693  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .loc[:, [\"Type 1\", \"Type 2\", \"Attack\", \"Defense\"]]\n          .assign(avg_attack_by_type=lambda df_: df_[[\"Type 1\", \"Attack\"]].groupby([\"Type 1\"]).transform(\"mean\"),\n                  avg_defense_by_type_combination=lambda df_: df_[[\"Type 1\", \"Type 2\", \"Defense\"]].fillna(\n                      {\"Type 2\": \"placeholder\"}).groupby([\"Type 1\", \"Type 2\"]).transform(\"mean\"),\n                  avg_attack=lambda df_: df_.Attack.mean())\n          .drop(columns=[\"Attack\", \"Defense\"])\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>      Type 1  Type 2  avg_attack_by_type  avg_defense_by_type_combination  avg_attack\n0      Grass  Poison           72.923077                        67.800000   75.349693\n1      Grass  Poison           72.923077                        67.800000   75.349693\n2      Grass  Poison           72.923077                        67.800000   75.349693\n3      Grass  Poison           72.923077                        67.800000   75.349693\n4       Fire     NaN           88.642857                        58.300000   75.349693\n..       ...     ...                 ...                              ...         ...\n158     Fire  Flying           88.642857                        82.000000   75.349693\n159   Dragon     NaN           94.000000                        55.000000   75.349693\n160   Dragon     NaN           94.000000                        55.000000   75.349693\n161   Dragon  Flying           94.000000                        95.000000   75.349693\n162  Psychic     NaN           53.875000                        51.428571   75.349693\n\n[163 rows x 5 columns]\n</code></pre> </p>"},{"location":"expressions/window_functions/#operations-per-group","title":"Operations per group","text":"<p>To achieve consistent results between <code>Polars</code> and <code>Pandas</code>, a trick is employed: duplicate a dummy column from <code>Type 1</code> to use as the <code>by</code> parameter in the <code>groupby(by=..)</code> operation in <code>Pandas</code>.</p> <p>This version maintains clarity while shortening the sentence slightly.</p> PolarsPandas <pre><code>out_pl = (df_pl\n          .filter(pl.col(\"Type 2\") == \"Psychic\")\n          .select(\"Name\", \"Type 1\", \"Speed\")\n          .with_columns(pl.col([\"Name\", \"Speed\"]).sort_by(\"Speed\", descending=True).over(\"Type 1\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (7, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Name                \u2506 Type 1 \u2506 Speed \u2502\n\u2502 ---                 \u2506 ---    \u2506 ---   \u2502\n\u2502 str                 \u2506 str    \u2506 i64   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Starmie             \u2506 Water  \u2506 115   \u2502\n\u2502 Slowbro             \u2506 Water  \u2506 30    \u2502\n\u2502 SlowbroMega Slowbro \u2506 Water  \u2506 30    \u2502\n\u2502 Exeggutor           \u2506 Grass  \u2506 55    \u2502\n\u2502 Exeggcute           \u2506 Grass  \u2506 40    \u2502\n\u2502 Slowpoke            \u2506 Water  \u2506 15    \u2502\n\u2502 Jynx                \u2506 Ice    \u2506 95    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>out_pd = (df_pd\n          .query(\"`Type 2` == 'Psychic'\")\n          .loc[:, [\"Name\", \"Type 1\", \"Speed\"]]\n          .assign(type1_tmp=lambda df_: df_[\"Type 1\"])\n          .groupby(\"type1_tmp\")\n          .transform(lambda g: sorted(g, reverse=True))\n          )\nprint(out_pd)\n</code></pre> <p><pre><code>                    Name Type 1  Speed\n85               Starmie  Water    115\n86              Slowpoke  Water     30\n87   SlowbroMega Slowbro  Water     30\n110            Exeggutor  Grass     55\n111            Exeggcute  Grass     40\n130              Slowbro  Water     15\n133                 Jynx    Ice     95\n</code></pre> </p>"},{"location":"expressions/window_functions/#one-more-example","title":"One more Example","text":"PolarsPandas <pre><code>out_pl = (df_pl\n          .sort(\"Type 1\")\n          .select(\n              pl.col(\"Type 1\").head(3).over(\n                  \"Type 1\", mapping_strategy=\"explode\"),\n              pl.col(\"Name\")\n              .sort_by(pl.col(\"Speed\"), descending=True)\n              .head(3)\n              .over(\"Type 1\", mapping_strategy=\"explode\")\n              .alias(\"fastest/group\"),\n              pl.col(\"Name\")\n              .sort_by(pl.col(\"Attack\"), descending=True)\n              .head(3)\n              .over(\"Type 1\", mapping_strategy=\"explode\")\n              .alias(\"strongest/group\"),\n              pl.col(\"Name\")\n              .sort()\n              .head(3)\n              .over(\"Type 1\", mapping_strategy=\"explode\")\n              .alias(\"sorted_by_alphabet\"))\n          )\nprint(out_pl)\n</code></pre> <p><pre><code>shape: (43, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Type 1 \u2506 fastest/group         \u2506 strongest/group       \u2506 sorted_by_alphabet      \u2502\n\u2502 ---    \u2506 ---                   \u2506 ---                   \u2506 ---                     \u2502\n\u2502 str    \u2506 str                   \u2506 str                   \u2506 str                     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Bug    \u2506 BeedrillMega Beedrill \u2506 PinsirMega Pinsir     \u2506 Beedrill                \u2502\n\u2502 Bug    \u2506 Scyther               \u2506 BeedrillMega Beedrill \u2506 BeedrillMega Beedrill   \u2502\n\u2502 Bug    \u2506 PinsirMega Pinsir     \u2506 Pinsir                \u2506 Butterfree              \u2502\n\u2502 Dragon \u2506 Dragonite             \u2506 Dragonite             \u2506 Dragonair               \u2502\n\u2502 \u2026      \u2506 \u2026                     \u2506 \u2026                     \u2506 \u2026                       \u2502\n\u2502 Rock   \u2506 Kabutops              \u2506 Kabutops              \u2506 Geodude                 \u2502\n\u2502 Water  \u2506 Starmie               \u2506 GyaradosMega Gyarados \u2506 Blastoise               \u2502\n\u2502 Water  \u2506 Tentacruel            \u2506 Kingler               \u2506 BlastoiseMega Blastoise \u2502\n\u2502 Water  \u2506 Poliwag               \u2506 Gyarados              \u2506 Cloyster                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <pre><code>def process_speed(df_):\n    return (df_\n            .loc[:, [\"Type 1\", \"Speed\", \"Name\"]]\n            .sort_values(\"Speed\", ascending=False)\n            .groupby(\"Type 1\")\n            .agg(list)\n            .assign(**{\"fastest/group\": lambda df_: df_[\"Name\"].str.slice(0, 3)})\n            .explode(\"fastest/group\")\n            .loc[:, \"fastest/group\"]\n            )\n\n\ndef process_attack(df_):\n    return (df_\n            .loc[:, [\"Type 1\", \"Attack\", \"Name\"]]\n            .sort_values(\"Attack\", ascending=False)\n            .groupby(\"Type 1\")\n            .agg(list)\n            .assign(**{\"strongest/group\": lambda df_: df_[\"Name\"].str.slice(0, 3)})\n            .explode(\"strongest/group\")\n            .loc[:, \"strongest/group\"]\n            )\n\n\ndef process_name(df_):\n    return (df_\n            .loc[:, [\"Type 1\", \"Name\"]]\n            .sort_values(\"Name\")\n            .groupby(\"Type 1\")\n            .agg(list)\n            .assign(**{\"sorted_by_alphabet\": lambda df_: df_[\"Name\"].str.slice(0, 3)})\n            .explode(\"sorted_by_alphabet\")\n            .loc[:, \"sorted_by_alphabet\"]\n            )\n\n\ndef window_pipeline(df_):\n    s_speed = process_speed(df_)\n    s_attack = process_attack(df_)\n    s_name = process_name(df_)\n    return pd.concat([s_speed, s_attack, s_name], axis=\"columns\")\n\n\nout_pd = (df_pd\n          .loc[:, [\"Type 1\", \"Speed\", \"Attack\", \"Name\"]]\n          .pipe(window_pipeline)\n          .reset_index()\n          )\nwith pd.option_context(\"display.max_rows\", 15):\n    print(out_pd)\n</code></pre> <p><pre><code>    Type 1          fastest/group        strongest/group         sorted_by_alphabet\n0      Bug  BeedrillMega Beedrill      PinsirMega Pinsir                   Beedrill\n1      Bug                Scyther  BeedrillMega Beedrill      BeedrillMega Beedrill\n2      Bug      PinsirMega Pinsir                 Pinsir                 Butterfree\n3   Dragon              Dragonite              Dragonite                  Dragonair\n4   Dragon              Dragonair              Dragonair                  Dragonite\n..     ...                    ...                    ...                        ...\n38    Rock             Aerodactyl                  Golem  AerodactylMega Aerodactyl\n39    Rock               Kabutops               Kabutops                    Geodude\n40   Water                Starmie  GyaradosMega Gyarados                  Blastoise\n41   Water             Tentacruel                Kingler    BlastoiseMega Blastoise\n42   Water                Poliwag               Gyarados                   Cloyster\n\n[43 rows x 4 columns]\n</code></pre> </p>"},{"location":"expressions/window_functions/#reference","title":"Reference","text":"<p>The examples in this section have been adapted from the <code>Polars</code> user guide.</p>"},{"location":"topics/missing_data/","title":"Missing data","text":"<p>under construction...</p>"},{"location":"topics/temporal/","title":"Temporal related","text":"<p>under construction...</p>"}]}